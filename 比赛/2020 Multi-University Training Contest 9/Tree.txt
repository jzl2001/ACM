Tree
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)
Total Submission(s): 920    Accepted Submission(s): 372


Problem Description
You are given a tree consisting of n vertices numbered 1 to n rooted at node 1. The parent of the i-th vertices is pi. You can move from a vertex to any of its children. What's more, you can add one directed edge between any two different vertices, and you can move through this edge too. You need to maximize the number of pairs (x,y) such that x can move to y through the edges after adding the edge. Note that x can also move to x.
 

Input
The first line contains one integer T (1≤T≤100000) — the number of test cases.

The first line of each test case contains only one integer n(1≤n≤5×105) — the number of vertices in the tree.

The second line of each test case contains n−1 integers p2,p3,…,pn(1≤pi<i) — the parent of each non-root node.

The sum of n over all test cases does not exceed 106.
 

Output
Print T integers — for each test case output the maximum number of pairs (x,y) that vertices x can move to y after adding one edge.
 

Sample Input
2
5
1 1 2 2
6
1 2 3 1 3
 

Sample Output
17
26
 

Source
2020 Multi-University Training Contest 9
 

Recommend
IceyWang   |   We have carefully selected several similar problems for you:  6900 6899 6898 6897 6896 
 

Statistic | Submit | Discuss | Note
题意：每个点可以向儿子移动，问加了一条边后多少个点对满足x到达y。
换根dp，肯定是某个点加到根，直接计算从根下来的链的收益，单个1答案是1。
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); };
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
const int N = 5e5 + 10;
vector<int>G[N];
ll d[N];
ll f[N];
ll ans, tot, n;
void dfs(int x, int fa)
{
	d[x] = 1;
	for (auto &i : G[x])
	{
		if (i == fa)
			continue;
		dfs(i, x);
		d[x] += d[i];
	}
}
void dfs1(int x, int fa)
{
	for (auto &i : G[x])
	{
		if (i == fa)
			continue;
		f[i] = f[x] + (n - d[i]);
		dfs1(i, x);
		ans = max(ans, tot + f[i]);
	}
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
	//freopen("E:/output.txt", "w", stdout);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		tot = 0, ans = 0;
		scanf("%d", &n);
		if (n == 1)
		{
			puts("1");
			continue;
		}
		for (int i = 2; i <= n; i++)
		{
			int num;
			scanf("%d", &num);
			G[num].push_back(i);
		}
		dfs(1, -1);
		for (int i = 1; i <= n; i++)
		{
			tot += d[i];
		}
		dfs1(1, -1);
		cout << ans << endl;
		for (int i = 1; i <= n; i++)
			G[i].clear();
	}
	return TIME;
}


#include <bits/stdc++.h>
using namespace std;
int vis[12];
int a[12];
char s[30];
int flag;
#define  break(x) {x; break;}
#ifdef LOCAL
#define debug(x) cout << "[" << __func__ << ": " #x " = " << (x) << "]\n"
#else
#define debug(x) ;
#endif
vector<string>v;
int data[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
bool calc(int y, int m, int d)
{
	int rn = 0;
	if (y % 400 == 0 || (y % 100 != 0 && y % 4 == 0))
		rn = 1;
	if (rn)
		data[2]++;
	if (y < 1600 || y > 9999 || d > data[m] || m < 1 || m > 12 || d == 0)
	{
		if (rn)
			data[2]--;
		return false;
	}
	if (rn)
		data[2]--;
	if (m < 3)
		m += 12, y--;
	return (d + 2 * m + 3 * (m + 1) / 5 + y + y / 4 - y / 100 + y / 400 + 1) % 7 == 5;
}
string w = "1436807952";
void dfs(int d)
{
	if (flag)
		return;
	if (d == 10) // CABJ/AI/AC
	{
		for (auto &i : v)
		{
			//	cout << i << endl;
			int y = 1000 * (a[i[0] - 'A']) + 100 * (a[i[1] - 'A']) + 10 * (a[i[2] - 'A']) + a[i[3] - 'A'];
			int m = (a[i[5] - 'A']) * 10 + (a[i[6] - 'A']);
			int d = (a[i[8] - 'A']) * 10 + (a[i[9] - 'A']);
			//	debug(d);
			if (!calc(y, m, d))
				return;
		}
		flag = 1;
		for (int i = 0; i < 10; i++)
			printf("%d", a[i]);
		cout << endl;
		return;
	}
	else
		for (int i = 0; i < 10; i++)
			if (!vis[i])
				vis[i] = 1, a[d] = i, dfs(d + 1), vis[i] = 0;
}
int main(){
	int kcase = 0;
	int t;
	cin >> t;
	while (t--)
	{
		flag = 0;
		memset(vis, 0, sizeof vis);
		memset(a, 0, sizeof a);
		printf("Case #%d: ", ++kcase);
		v.clear();
		int n;
		cin >> n;
		for (int i = 1; i <= n; i++)
		{
			scanf("%s", s);
			v.push_back(s);
		}
		sort(v.begin(), v.end());
		v.erase(unique(v.begin(), v.end()), v.end());
		dfs(0);
		if (!flag)
			puts("Impossible");
	}
	return 0;
}
/*
CABJ/AI/AE
CABJ/AI/AB
CABJ/AI/AC
CABJ/AI/AD
CABJ/AI/AD
CABJ/AI/AD
*/

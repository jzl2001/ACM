<随机>或者<思维>
将a从大到小排序，然后b两个两个取则一定能满足条件
因为对于a前两个里面的最小值也大于后两个里面的最大值
然后能取n / 2 + 1个所以满足条件
或者随机一个序列复杂度未知
<思维>
#include <iostream>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <bits/stdc++.h>
#include <unordered_map>
#include <random>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
 
#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res % mod; }
const int mod = 1e9 + 7;
const int N = 1e6 + 10;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
int a[N];
int b[N];
int pos[N];
int main()
{
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	int n;
	ll sum1 = 0;
	ll sum2 = 0;
	cin >> n;
	for (int i = 1; i <= n; i++)
		scanf("%d", &a[i]), pos[i] = i, sum1 += a[i];
	for (int i = 1; i <= n; i++)
		scanf("%d", &b[i]), sum2 += b[i];
	for (int i = 1; i <= 10000; i++)
	{
		random_shuffle(pos + 1, pos + n + 1);
		ll suma = 0;
		ll sumb = 0;
		for (int j = 1; j <= n / 2 + 1; j++)
		{
			suma += a[pos[j]];
			sumb += b[pos[j]];
		}
		if (suma * 2 > sum1 && sumb * 2 > sum2)
			break;
	}
	cout << n / 2 + 1 << endl;
	for (int i = 1; i <= n / 2 + 1; i++)
		cout << pos[i] << " ";
	cout << endl;
	return TIME;
}
<思维>
#include <iostream>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <bits/stdc++.h>
#include <unordered_map>
#include <random>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
 
#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res % mod; }
const int mod = 1e9 + 7;
const int N = 1e6 + 10;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
int a[N];
int b[N];
int pos[N];
vector<int>ans;
int main()
{
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	int n;
	ll sum1 = 0;
	ll sum2 = 0;
	cin >> n;
	for (int i = 1; i <= n; i++)
		scanf("%d", &a[i]), pos[i] = i, sum1 += a[i];
	for (int i = 1; i <= n; i++)
		scanf("%d", &b[i]), sum2 += b[i];
	sort(pos + 1, pos + n + 1, [&](int x, int y) { return a[x] > a[y]; });
	int x = 1;
	if (n % 2)
		x = 2, ans.push_back(pos[1]);
	for (int i = x; i <= n - 1; i += 2)
	{
		if (b[pos[i]] > b[pos[i + 1]])
			ans.push_back(pos[i]);
		else
			ans.push_back(pos[i + 1]);
	}
	cout << n / 2 + 1 << endl;
	if (n % 2 == 0)
		b[pos[1]] > b[pos[2]] ? ans.push_back(pos[2]) : ans.push_back(pos[1]);
	for (auto &i : ans)
		cout << i << " ";
	return TIME;
}
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
#define sz(a) ((int)(a).size())
typedef long long ll;
bool cmp(int a, int b) { return a > b; }
#define me(a, b) (memset(a, b, sizeof a))
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;
const double PI = acos(-1);
const int N = 2e5 + 10;
template<typename S, typename T> inline bool Min(S &a, const T &b){ return a > b ? a = b, true : false; }
template<typename S, typename T> inline bool Max(S &a, const T &b){ return a < b ? a = b, true : false; }
template<typename S, typename T> inline void Adm(S &a, const T &b){ a = (a + b) % mod; if (a < 0) a += mod; }
template<typename S, typename T> inline void Mum(S &a, const T &b){ a = 1LL * a * b % mod; }
template<typename T> inline T gcd(T a, T b){ while (b){ T t = b; b = a % b; a = t; }return a; }
template<typename T> inline int bcnt(T x){ int cnt = 0; while (x)++cnt, x &= x - 1; return cnt; }
inline ll fpow(ll a, ll b) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
#define bo bool operator < (const node &oth)const
#define AC return 0;
 
ll last = 1, ln, lk;
ll a[N];
ll fac[N];
ll inv[N];
ll C(int n, int m)
{
	return fac[n] * inv[m] % mod * inv[n - m] % mod;
}
void init()
{
	fac[0] = inv[0] = 1;
	for (int i = 1; i < N; i++)
		fac[i] = fac[i - 1] * i % mod, inv[i] = fpow(fac[i], mod - 2);
}
ll fun(ll n, ll k) // ln, lkÉÏ´ÎµÄn¸úk
{
	while (ln < n)
		Adm(last, last), Adm(last, -C(ln, lk)), ln++, lk++;
	while (lk > k)
		lk--, Adm(last, C(ln, lk));
	while (lk < k)
		Adm(last, -C(ln, lk)), lk++;
	return last;
}
int main(){
	init();
	ll n, m;
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		scanf("%I64d", &a[i]), a[i] += a[i - 1];
	ll ans = 0, p = 1;
	for (int i = 1; i <= n; i++)
	{
		Mum(p, inv[2]);
		if (a[i] > m)
			break;
		else
			if (a[i] + i <= m)
				Adm(ans, 1);
			else
				Adm(ans, fun(i, i + a[i] - m) * p);
	}
	cout << (ans + mod) % mod << endl;
	AC
}

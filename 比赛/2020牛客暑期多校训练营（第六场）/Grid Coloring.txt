链接：https://ac.nowcoder.com/acm/contest/8100/G
来源：牛客网

时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 262144K，其他语言524288K
Special Judge, 64bit IO Format: %lld
题目描述 
Roundgod draws a grid graph of size nn with n \times nn×n cells. She can use one of kk colors to color every edge once, but lzr gives her some limits.
lzr loves balance. All colors should appear in the same number of times.
lzr loves complexity. The graph should not contain any monochromatic cycle.
lzr hates monotone. Each whole horizontal or vertical line of the graph should contain at least two colors.

Roundgod is so divine that she doesn't want to waste her god's power to solve this problem. Could you give her a solution?
输入描述:
The input contains multiple test cases. The first line of input contains one integer T\ (1\le T\le100)T (1≤T≤100).
In the following TT lines, each line contains two integers n,k\ (1\le n\le200,1\le k\le2(n+1)n)n,k (1≤n≤200,1≤k≤2(n+1)n) describing one test case.
输出描述:
For each test case, if there's no solution, please output "-1".
Otherwise, output 2(n+1)2(n+1) lines. 
For the first n+1n+1 lines, each line contains nn integers, denoting colors of edges on every horizontal line.
For the last n+1n+1 lines, each line contain nn integers, denoting colors of edges on every vertical line.
示例1
输入
复制
2
2 3
2 5
输出
复制
1 2
3 1
3 2
1 3
2 1
2 3
-1

题意：给出一个n*n的矩阵，k种颜色，每次可以染色边，要求是所有颜色都必须分配均匀，且不能含有
同色环，而且一条边上至少含有两种颜色。
思路：去掉不满足的条件之后，只要保证上下两个边的颜色不同即可，那样不会产生同色环，如果n%k!=0直接
按照编号顺序输出即可，如果n%k==0则每次变换这一个长度为n的排列，则数目一样，且错开了同种颜色成为上
下对应。
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;

int main()
{
#ifdef LOCAL
    freopen("E:\input.txt", "r", stdin);
#endif // LOCAL
    int t;
    cin >> t;
    while (t--)
    {
        int n, k;
        cin >> n >> k;
        int tot = n * (n + 1) * 2;
        if (n == 1 || k == 1 || tot % k != 0)
        {
            puts("-1");
        }
        else
        {
            if (n % k != 0)
            {
                int num = 0;
                for (int i = 1; i <= n + 1; i++)
                {
                    for (int j = 1; j <= n; j++)
                    {
                        num = (num + 1) % k;
                        printf("%d%c", num == 0 ? k : num, j == n ? '\n' : ' ');
                    }
                }
                for (int i = 1; i <= n + 1; i++)
                {
                    for (int j = 1; j <= n; j++)
                    {
                        num = (num + 1) % k;
                        printf("%d%c", num == 0 ? k : num, j == n ? '\n' : ' ');
                    }
                }
            }
            else
            {
                for (int i = 1; i <= n + 1; i++)
                {
                    int num = i % k - 1;
                    for (int j = 1; j <= n; j++)
                    {
                        num = (num + 1) % k;
                        printf("%d%c", num == 0 ? k : num, j == n ? '\n' : ' ');
                    }
                }
                for (int i = 1; i <= n + 1; i++)
                {
                    int num = i % k - 1;
                    for (int j = 1; j <= n; j++)
                    {
                        num = (num + 1) % k;
                        printf("%d%c", num == 0 ? k : num, j == n ? '\n' : ' ');
                    }
                }
            }
        }
    }
    return 0;
}

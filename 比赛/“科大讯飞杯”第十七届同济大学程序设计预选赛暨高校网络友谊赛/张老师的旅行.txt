链接：https://ac.nowcoder.com/acm/contest/5477/C
来源：牛客网

时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
张老师到了一个王国去旅游，王国有n个景点，张老师到达这个城市所在的车站恰好位于第x个景点，这个王国非常特别，恰好所有著名的景点都在分布在直线上，每个景点在坐标pi上(单位：公里)，张老师身体非常好，每走一公里花费一分钟。每个景点都有一个打卡点，并且必须在不迟于相应的时间（时间从张老师到达王国开始计算）前到达才能打卡成功并且给以一个打卡标记，集齐所这些标记就能获得一个大礼包。由于张老师非常想要大礼包，并且因为张老师还着急去下一个王国旅游，所以张老师希望用的时间尽量少，你能帮帮张老师吗？

输入描述:
输入的第一行，包含一个整数n（1≤n≤1000）。
第二行包含n个整数pi(1≤pi≤100000)，第i个整数pi为第i个景点的坐标（坐标从小到大排列）。
最后一行包含n个整数ti(0≤ti≤10,000,000)，ti表示第i个景点最迟到达的时间，时间为0则表示张老师所在车站的位置且只有一个为0。

输出描述:
输出所需的最少时间，若无解输出-1。
示例1
输入
复制
4
1 2 3 4
0 1 2 3
输出
复制
3
不会来回折返的，到达某个点路过的点肯定被访问了，
区间dp
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 998244353;
const int N = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
int pos[N];
int t[N];
int d[1010][1010][2];//区间i，j 位于i或者j的代价
int calc(int L, int R)
{
	return abs(pos[R] - pos[L]);
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n;
	cin >> n;
	memset(d, 0x3f, sizeof d);
	for (int i = 1; i <= n; i++)
	{
		cin >> pos[i];
	}
	for (int i = 1; i <= n; i++)
	{
		cin >> t[i];
		if (!t[i])
			d[i][i][0] = d[i][i][1] = 0;
	}
	for (int len = 2; len <= n; len++)
	{
		for (int i = 1; i + len - 1 <= n; i++)
		{
			int j = i + len - 1;
			if (d[i + 1][j][0] + calc(i, i - 1) <= t[i])
				d[i][j][0] = min(d[i][j][0], d[i + 1][j][0] + calc(i, i + 1));
			if (d[i + 1][j][1] + calc(i, j) <= t[i])
				d[i][j][0] = min(d[i][j][0], d[i + 1][j][1] + calc(i, j));
			if (d[i][j - 1][0] + calc(i, j) <= t[j])	
				d[i][j][1] = min(d[i][j][1], d[i][j - 1][0] + calc(i, j));
			if (d[i][j - 1][1] + calc(j - 1, j) <= t[j])
				d[i][j][1] = min(d[i][j][1], d[i][j - 1][1] + calc(j - 1, j));
		}
	}
	if (d[1][n][0] == INF && d[1][n][1] == INF)
		cout << -1 << endl;
	else
		cout << min(d[1][n][0], d[1][n][1]) << endl;
	return TIME;
}

时间限制：C/C++ 2秒，其他语言4秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
Fib(i)表示斐波那契函数，Fib(n)=Fib(n-1)+Fib(n-2)，如Fib(1)=1，Fib(2)=1，Fib(3)=2，Fib(4)=3，Fib(5)=5，Fib(6)=8。

给定正整数n和k，求：
\sum_{i=1}^{n} i^kFib(i)∑ 
i=1
n
​	
 i 
k
 Fib(i)
由于结果太大，你需要把求和的结果对998,244,353取余。


输入描述:
输入一行，包含两个整数n和k（1≤n≤1018，1≤k≤100）
输出描述:
输出一个整数，表示求和对998,244,353取余的结果。

示例1
输入
复制
5 2
输出
复制
196
说明
样例解释：
//BM杜教，线性递推
1*1*Fib(1) + 2*2*Fib(2) + 3*3*Fib(3) + 4*4*Fib(4) + 5*5*Fib(5) = 196
#include<bits/stdc++.h>
using namespace std;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())
typedef vector<int> VI;
typedef long long ll;
typedef pair<int, int> PII;
const int mod = 998244353;
ll powmod(ll a, ll b) { ll res = 1; a %= mod; assert(b >= 0); for (; b; b >>= 1){ if (b & 1)res = res*a%mod; a = a*a%mod; }return res; }
// head

ll n;
namespace linear_seq {
	const int N = 10010;
	ll res[N], base[N], _c[N], _md[N];

	vector<int> Md;
	void mul(ll *a, ll *b, int k) {
		rep(i, 0, k + k) _c[i] = 0;
		rep(i, 0, k) if (a[i]) rep(j, 0, k) _c[i + j] = (_c[i + j] + a[i] * b[j]) % mod;
		for (int i = k + k - 1; i >= k; i--) if (_c[i])
			rep(j, 0, SZ(Md)) _c[i - k + Md[j]] = (_c[i - k + Md[j]] - _c[i] * _md[Md[j]]) % mod;
		rep(i, 0, k) a[i] = _c[i];
	}
	int solve(ll n, VI a, VI b) { // a 系数 b 初值 b[n+1]=a[0]*b[n]+...
		ll ans = 0, pnt = 0;
		int k = SZ(a);
		assert(SZ(a) == SZ(b));
		rep(i, 0, k) _md[k - 1 - i] = -a[i]; _md[k] = 1;
		Md.clear();
		rep(i, 0, k) if (_md[i] != 0) Md.push_back(i);
		rep(i, 0, k) res[i] = base[i] = 0;
		res[0] = 1;
		while ((1ll << pnt) <= n) pnt++;
		for (int p = pnt; p >= 0; p--) {
			mul(res, res, k);
			if ((n >> p) & 1) {
				for (int i = k - 1; i >= 0; i--) res[i + 1] = res[i]; res[0] = 0;
				rep(j, 0, SZ(Md)) res[Md[j]] = (res[Md[j]] - res[k] * _md[Md[j]]) % mod;
			}
		}
		rep(i, 0, k) ans = (ans + res[i] * b[i]) % mod;
		if (ans < 0) ans += mod;
		return ans;
	}
	VI BM(VI s) {
		VI C(1, 1), B(1, 1);
		int L = 0, m = 1, b = 1;
		rep(n, 0, SZ(s)) {
			ll d = 0;
			rep(i, 0, L + 1) d = (d + (ll)C[i] * s[n - i]) % mod;
			if (d == 0) ++m;
			else if (2 * L <= n) {
				VI T = C;
				ll c = mod - d*powmod(b, mod - 2) % mod;
				while (SZ(C) < SZ(B) + m) C.pb(0);
				rep(i, 0, SZ(B)) C[i + m] = (C[i + m] + c*B[i]) % mod;
				L = n + 1 - L; B = T; b = d; m = 1;
			}
			else {
				ll c = mod - d*powmod(b, mod - 2) % mod;
				while (SZ(C) < SZ(B) + m) C.pb(0);
				rep(i, 0, SZ(B)) C[i + m] = (C[i + m] + c*B[i]) % mod;
				++m;
			}
		}
		return C;
	}
	int gao(VI a, ll n) {
		VI c = BM(a);
		c.erase(c.begin());
		rep(i, 0, SZ(c)) c[i] = (mod - c[i]) % mod;
		return solve(n, c, VI(a.begin(), a.begin() + SZ(c)));
	}
};
ll a[10010]; 
int main() 
{
	a[1] = 1;
	a[2] = 1;
	for (int i = 3; i <= 10000; i++)
		a[i] = (a[i - 1] + a[i - 2]) % mod;
	vector<int>v;
	ll n;
	int k;
	cin >> n >> k;
	ll sum = 0;
	for (int i = 1; i <= 10000; i++)
	{
		ll u = 1;
		for (int j = 1; j <= k; j++)
			u = u * i % mod;
		sum = (sum + u * a[i] % mod) % mod;
		v.push_back(sum);
	}
	printf("%lld\n", 1LL * linear_seq::gao(v, n - 1) % mod);
}
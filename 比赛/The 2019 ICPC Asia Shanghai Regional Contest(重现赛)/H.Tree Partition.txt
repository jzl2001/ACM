链接：https://ac.nowcoder.com/acm/contest/4370/H
来源：牛客网

Tree Partition
时间限制：C/C++ 3秒，其他语言6秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
Bob has learned about all fancy algorithms on trees recently, so he decided to give you a little quiz.
You are given an undirected tree with \mathbf{N}N weighted nodes. You are to cut the tree into \mathbf{K}K partitions (subtrees). In other words, you are to cut \mathbf{K-1}K−1 edges from the tree so that the rest form a forest consisting of \mathbf{K}K trees.
The weight of a tree is defined as the sum of weights of all nodes in the tree. Your final score is the maximum weight of all partitions. Please find the best partition so that your final score is as small as possible.
输入描述:
The first line is a positive integer \mathbf{T}T (1 \leq \mathbf{T} \leq 10^51≤T≤10 
5
 ), which is the number of test cases followed.
For each test case, the first line contains two integers \mathbf{N}N and \mathbf{K}K (1 \le \mathbf{K} \le \mathbf{N} \le 10^51≤K≤N≤10 
5
 ), the size of tree and the number of partitions respectively. Each of the following n-1 lines contains of two space-separated integers \mathbf{U_i}U 
i
​	
  and \mathbf{V_i}V 
i
​	
  (1 \le \mathbf{U_i}, \mathbf{V_i} \le \mathbf{N}1≤U 
i
​	
 ,V 
i
​	
 ≤N; \mathbf{U_i} \ne \mathbf{V_i}U 
i
​	
  

​	
 =V 
i
​	
 ), denoting the endpoints of the i-th edge. Finally, there is a line of \mathbf{N}N space-separated integers \mathbf{W_i}W 
i
​	
  (1 \le \mathbf{W_i} \le 10^91≤W 
i
​	
 ≤10 
9
 ), which are the weights of the nodes.
The sum of values of \mathbf{N}N for all test cases does not exceed 2 \times 10^52×10 
5
 .
输出描述:
For each test case, output one line containing "Case #x: y", where x is the test case number and y is the answer.
示例1
输入
复制
2
5 3
1 2
1 3
1 4
1 5
1 2 3 4 5
5 4
1 2
1 3
1 4
1 5
1 2 3 4 5
输出
复制
Case #1: 6
Case #2: 5
说明
For example 1, three partitions are {\{1, 2, 3\}, \{4\}, \{5\}}{1,2,3},{4},{5}.
For example 2, four partitions are {\{1, 2\}, \{3\}, \{4\}, \{5\}}{1,2},{3},{4},{5}.

求把树划分成k部分，使得点权和最大值最小。
二分加贪心。
二分答案，自下而上，sum数组表示以当前点为根的选的子树的点权和。
每次从小到大排序，每次不能选了就cnt++，即分的部分++。
#include <iostream>
#include <bits/stdc++.h>
//#include <unordered_map>
#include <time.h>
#include <algorithm>
#include <stdio.h>
#include <string.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 2e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
vector<int>G[N];
ll d[N];
ll a[N];
ll sum[N];
int vis[N];
int tot;
void dfs(int x, ll mid)
{
	vis[x] = 1;
	vector<ll>v;
	sum[x] = a[x];
	for (auto &i : G[x])
	{
		if (vis[i])
			continue;
		dfs(i, mid);
		v.push_back(sum[i]);
	}
	int cnt = 0;
	sort(v.begin(), v.end());
	for (auto &i : v)
	{
		if (sum[x] + i <= mid)
			sum[x] += i, cnt++;
		else
			break;
	}
	tot += v.size() - cnt;
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	int kcase = 0;
	while (t--)
	{
		memset(a, 0, sizeof a);
		printf("Case #%d: ", ++kcase);
		int n, k;
		cin >> n >> k;
		ll L = 0, R = 0;
		for (int i = 1; i < n; i++)
		{
			int u, v;
			cin >> u >> v;
			G[u].push_back(v);
			G[v].push_back(u);
		}
		for (int i = 1; i <= n; i++)
			scanf("%lld", &a[i]), L = max(L, a[i]), R += a[i];
		ll ans = 0;
		while (L <= R)
		{
			fill(vis, vis + n + 5, 0);
			ll mid = (L + R) >> 1;
			tot = 0;
			dfs(1, mid);
			if (tot <= k - 1)
				ans = mid, R = mid - 1;
			else
				L = mid + 1;
		}
		printf("%lld\n", ans);
		for (int i = 1; i <= n; i++)
		{
			G[i].clear();
		}
	}
	return TIME;
}

Isomorphic Strings
Time Limit: 8000/8000 MS (Java/Others)    Memory Limit: 524288/524288 K (Java/Others)
Total Submission(s): 2250    Accepted Submission(s): 635


Problem Description
It is preferrable to read the pdf statment.

Two strings are called cyclical isomorphic if one can rotate one string to get another one. 'Rotate' here means ''to take some consecutive chars (maybe none) from the beginning of a string and put them back at the end of the string in the same order''. For example, string ''abcde'' can be rotated to string ''deabc''.

Now that you know what cyclical isomorphic is, Cuber QQ wants to give you a little test.

Here is a string s of length n. Please check if s is a concatenation of k strings, s1,s2,⋯,sk (k>1), where,

k is a divisor of n;

s1,s2,…,sk are of equal length: nk;

There exists a string t, which is cyclical isomorphic with si for all 1≤i≤k.


Print ''Yes'' if the check is positive, or ''No'' otherwise.
 

Input
The first line contains an integer T (1≤T≤1000), denoting the number of test cases. T cases follow.

The first line of each test case contains an integer n (1≤n≤5⋅106).

The second line contains a string s of length n consists of lowercase letters only.


It is guaranteed that the sum of n does not exceed 2⋅107.
 

Output
For each test case, output one line containing ''Yes'' or ''No'' (without quotes).
 

Sample Input
6
1
a
2
aa
3
aab
4
abba
6
abcbcc
8
aaaaaaaa
 

Sample Output
No
Yes
No
Yes
No
Yes
 

Source
2020 Multi-University Training Contest 8
 

Recommend
IceyWang   |   We have carefully selected several similar problems for you:  6900 6899 6898 6897 6896 
 

Statistic | Submit | Discuss | Note
求能否把字符串分成份数大于1的若干份且每份之间互相循环同构。
调和级数，复杂度分析。直接暴力求即可，最小表示法。
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

#define fst first
#define sed second
#define psb push_back
#define ALL(x) (x).begin(), (x).end()
#define MEM(x, y) memset((x), (y), sizeof(x))
#define SZ(x) ((int)(x).size())

void Max(ll &a, ll b)
{
    if (a < b)
        a = b;
}
void Min(ll &a, ll b)
{
    if (a > b)
        a = b;
}
const int N = 5e6 + 10;
char s[N];
vector<int> get(int num)
{
    vector<int>v;
    for (ll i = 1; i * i <= num; i++)
    {
        if (num % i == 0)
        {
            if (i != 1)
                v.push_back(i);
            if (i * i != num)
                v.push_back(num / i);
        }
    }
    sort(v.begin(), v.end());
    return v;
}
void get_string(char* s, int n, string &res)
{
    res.clear();
    int k = 0, i = 0, j = 1;
    while (k < n && i < n && j < n)
    {
        if (s[(i + k) % n] == s[(j + k) % n])
            k++;
        else
        {
            s[(i + k) % n] > s[(j + k) % n] ? i = i + k + 1 : j = j + k + 1;
            if (i == j)
                i++;
            k = 0;
        }
    }
    i = min(i, j);
    for (int w = i; w < n; w++)
        res.push_back(s[w]);
    for (int w = 0; w < i; w++)
        res.push_back(s[w]);
}

int main()
{
#ifdef LOCAL
    freopen("/home/user/Desktop/input.txt", "r", stdin);
#endif
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        scanf("%d", &n);
        scanf("%s", s + 1);
        if (n == 1)
        {
            puts("No");
            continue;
        }
        vector<int>v = get(n);
        int sz = v.size();
        int flag = 0;
        string base, ss;
        for (int i = 0; i < sz; i++) // geshu
        {
            int nf = 1;
            int len = n / v[i];
            get_string(s + 1, len, base);
            //cout << len << " " << base << endl;
            for (int j = len + 1; j <= n; j += len)
            {
                get_string(s + j, len, ss);
                if (ss != base)
                {
                    nf = 0;
                    break;
                }
            }
            if (nf == 1)
            {
                flag = 1;
                break;
            }
        }
        if (flag)
            puts("Yes");
        else
            puts("No");
    }
    return 0;
}
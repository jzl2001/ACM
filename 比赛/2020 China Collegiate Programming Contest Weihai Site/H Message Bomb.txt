While we enjoy chatting with friends on the internet, it is always annoying that we are overwhelmed by lots of messages in various chat groups. A great majority of these messages are actually not interesting to us, but we may miss some important notices if we silence these groups. How many messages do we receive from all online chat groups? Nobody has ever seriously gone into this question.

As an assistant researcher in the school of informatics, you are required to investigate the number of online messages we receive every day. We have already sampled n groups and m students. Every group contains a subset of the m students, which is possibly empty. Also, the members of the groups are constantly evolving; old members may quit, and new members may join in a chat group. Members can send messages in the group; the message is broadcast to all other members currently in the same group.

Now we have collected the log of these chat groups. The log is a sequence of events, which may be a student joining in a group, quitting a group, or sending a message in a group. Your task is to compute the total number of messages received by every student.

Input Specification:
The first line of the input contains three integers n,m,s (1≤n≤100000,1≤m≤200000,1≤s≤1000000), denoting the number of groups, the number of students and the number of events in the log.

The next s lines give the events in the log in chronological order. Each of them contains three integers t,x,y (t∈{1,2,3},1≤x≤m,1≤y≤n) specifying an event, which may fall into one of the following three categories:

If t=1, it means that the x-th student joined in the y-th group. It is guaranteed that the student was not in the group before.
If t=2, it means that the x-th student quitted the y-th group. It is guaranteed that the student was currently in the group.
If t=3, it means that the x-th student sent a message in the y-th group. It is guaranteed that the student was in the group now.
Initially, all groups were empty.

Output Specification:
Output m lines. The i-th line contains an integer, denoting the total number of messages the i-th student received.

Sample Input 1:
3 3 10
1 3 2
1 3 1
1 1 2
1 2 1
3 1 2
2 3 1
3 3 2
3 2 1
3 3 2
3 2 1
Sample Output 1:
2
0
1
Sample Input 2:
2 5 10
1 1 2
3 1 2
2 1 2
1 3 2
1 1 2
3 1 2
3 3 2
1 4 2
3 3 2
1 5 1
Sample Output 2:
2
0
1
1
0
<模拟>
题意：有n个小组，x个人，和s次操作。
1号操作某人加入某小组，2号操作某人退出某小组，3号某个人在某个小组内发了一条消息。
问最后每个人收了多少条聊天记录。
存下每个组的人，对操作打标记即可。
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
const int mod = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); };
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
const int N = 2e5 + 10;

set<int> st[N];
int ans[N];
int pr[N];
int g[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n, m, s;
	scanf("%d%d%d", &n, &m, &s);
	for (int i = 1; i <= s; i++)
	{
		int op, x, y;
		scanf("%d%d%d", &op, &x, &y);
		if (op == 1)
		{
			st[y].insert(x);
			pr[x] -= ans[y];
		}
		else
			if (op == 2)
			{
				auto it = st[y].find(x);
				st[y].erase(it);
				pr[x] += ans[y];
			}
			else
				ans[y]++, pr[x]--;
	}
	for (int i = 1; i <= n; i++)
		for (auto &j : st[i])
			pr[j] += ans[i];
	for (int i = 1; i <= m; i++)
		printf("%d\n", pr[i]);
	return TIME;
}

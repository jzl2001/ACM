/*扩展kmp
*/
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;

const int INF = 0x3f3f3f3f;
const int MAXN = 1e6 + 10;
char s[MAXN], p[MAXN];
int exnex[MAXN]; //扩展next数组
int exten[MAXN]; //s从i为起点的后缀与p的最长公共前缀

//s主串 p模式串 n主串长度 m模式串长度
void getexnext(const char p[], int m)
{
	int i = 0, j;
	exnex[0] = m; //0号位为长度
	while (i + 1 < m && p[i] == p[i + 1]) //计算第一项
		i++;
	exnex[1] = i;
	int k = 1 + i, po = 1; //k最远到达点 po最远到达点的起点
	for (i = 2; i < m; i++)
	{
		if (exnex[i - po] < k - i) //因k~po == 0~k-po 则i~k == i-po~k-po(取前者后一部分)
			exnex[i] = exnex[i - po]; //如果exnet[i-po]不足k-i长度则s[i - po + exnet[i-po]] != s[i + exnet[i-po]]
		else
		{
			j = k - i;//如果长度相等或更长因k之后为未探索区域 暂定为k - i之后继续匹配
			if (j < 0) //如果i本身就超过k
				j = 0;
			while (i + j < m && p[i + j] == p[j])
				j++;
			exnex[i] = j;
			k = i + j, po = i; //更新记录
		}
	}
}
int main()
{
	//freopen("D:/input.txt", "r", stdin);
	int t;
	cin >> t;
	while (t--)
	{	
		memset(exnex, 0, sizeof exnex);
		scanf("%s", s);
		int len = strlen(s);
		getexnext(s, len);
		long long ans = 0;
		for (int i = 1; i < len; i++)
		{
			if (i + exnex[i] == len)
				ans += exnex[i];
			else
				ans += exnex[i] + 1;
		}
		cout << ans << endl;
	}
	return 0;
}

/*
dp 组合数
*/
#include <bits/stdc++.h>
using namespace std;
const int N = 3e3 + 10;
typedef long long ll;
ll mod = 998244353;
template<typename S, typename T> inline bool Min(S &a, const T &b){ return a > b ? a = b, true : false; }
template<typename S, typename T> inline bool Max(S &a, const T &b){ return a < b ? a = b, true : false; }
template<typename S, typename T> inline void Adm(S &a, const T &b){ a = (a % mod + b % mod) % mod; }
template<typename S, typename T> inline void Mum(S &a, const T &b){ a = 1LL * a * b % mod; }
ll fpow(ll a, ll b) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
char a[N];
char b[N];
ll d[N][N];  
ll inv[N];
int n, m;
ll C[N][N];
void init(){
	for (int i = 0; i < N; i++){
		C[i][0] = C[i][i] = 1;
		for (int j = 1; j < i; j++){
			C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod;
		}
	}
}
/*
ll C(ll a, ll b)
{
	if (a == b || a == 0)
		return 1;
	return c[b] * inv[a] % mod * inv[b - a] % mod;
}*/
ll getM()  // 比b长度大的
{
	ll ans = 0;
	for (int i = 1; i <= n; i++)
	{
		if (a[i] != '0')
			for (int j = m; j <= n - i; j++)
				Adm(ans, C[n - i][j]);
	}
	return ans % mod;
}
ll getq() // 长度相等的
{
	d[0][0] = 1;   
	ll ans = 0;
	for (int i = 1; i <= n; i++)
	{
		d[i][0] = 1;
		for (int j = 1; j <= m; j++)
		{
			d[i][j] = d[i - 1][j];
 
			if (a[i] == b[j])
				Adm(d[i][j], d[i - 1][j - 1]);
			else
				if (a[i] > b[j])
				Adm(ans, d[i - 1][j - 1] * C[n - i][m - j] % mod);
		}
	}
	return ans % mod;
}
int main(){
//	freopen("D:/input.txt", "r", stdin);
	init();
	int t;
	cin >> t;
	while (t--)
	{
		cin >> n >> m;	

		scanf("%s", a + 1);
		scanf("%s", b + 1);
		cout << (getM() + getq()) % mod << endl;	
		for (int i = 0; i <= n; i++)
			for (int j = 0; j <= m; j++)
				d[i][j] = 0;
	}
	return 0;
}
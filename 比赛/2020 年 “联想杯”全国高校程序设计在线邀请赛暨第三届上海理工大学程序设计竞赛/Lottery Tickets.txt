Setsuna is almost out of money! Therefore, she always thinks about ways to get rich overnight.

She finds that buying lottery tickets is a wonderful choice, and she decides to use her lucky number as the lottery number.

Setsuna uses some unique methods to pick her lucky numbers. She will first select  magic cards. Each card is written with a digit between  and  inclusively. Then she will use some cards to construct a number. She believes that the largest number she can construct which can be divided by 4 is her lucky number.

It is unnecessary to use all the cards, and it is possible that such lucky number does not exist.

Because she is daydreaming of getting rich, only you can help her find this lucky number.

输入格式
The input consists of multiple test cases.

The first line contains a single integer 
, indicating the number of test cases.

Each of the next  lines contains  integers 
, where 
 indicates the number of cards written with number .

It is guaranteed that the sum of 
 of all test cases does not exceed 
.

输出格式
For each test case given in the input, print the lucky number(without leading zero) or  if such lucky number does not exist.

样例
input
6
0 1 1 0 0 0 0 0 0 0
0 0 0 0 1 0 0 0 0 0
1 0 0 2 0 0 0 0 0 0
2 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
0 1 1 1 1 1 1 1 1 1
output
12
4
0
98765432100
9876543120
987654312
给出9个数字的个数
询问能组成的能整除4的个数
能被四整除，后两位能被四整除
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 998244353;
const int N = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
int cnt[12];
struct node
{
	int a, b;
	bool operator < (const node &oth)const
	{
		if (max(a, b) != max(oth.a, oth.b))
			return max(a, b) < max(oth.a, oth.b);
		else
		{
			if (min(a, b) == min(oth.a, oth.b))
			{
				return a * 10 + b > oth.a * 10 + b;
			}
			return min(a, b) < min(oth.a, oth.b);
		}	
	}
}a[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
		while (t--)
		{
			ll tot = 0;
			set<int>s;
			for (int i = 0; i <= 9; i++)
			{
				scanf("%d", &cnt[i]);
				tot += cnt[i] * i;
				if (cnt[i])
				{
					s.insert(i);
				}
			}
			if (tot == 0)
			{
				puts("0");
				continue;
			}
			if (s.size() == 1)
			{
				int num = *s.begin();
				if (num == 4 || num == 8)
				{
					for (int i = 1; i <= cnt[num]; i++)
					{
						printf("%d", num);
					}
					puts("");
				}
				else
					puts("-1");
				continue;
			}
			int q = 0;
			int flag = 0;
			string ans;
			for (int i = 0; i <= 9; i++)
			{
				for (int j = 0; j <= 9; j++)
				{
					int num = i * 10 + j;
					if (num % 4 == 0)
					{
						cnt[i]--, cnt[j]--;
						if (cnt[i] >= 0 && cnt[j] >= 0)
						{
							a[++q] = { i, j };
							flag = 1;
						}
						cnt[i]++, cnt[j]++;
					}
				}
			}
			int flag1 = 0;
			if (!flag)
			{
				for (int i = 9; i >= 0; i--)
				{
					if (i % 4 == 0 && cnt[i])
					{
						cout << i << endl;
						flag1 = 1;
						break;
					}
				}
				if (!flag1)
				{
					puts("-1");
					continue;
				}
				continue;
			}
			sort(a + 1, a + q + 1);
			ans.push_back(a[1].a + '0');
			ans.push_back(a[1].b + '0');
			cnt[a[1].a]--;
			cnt[a[1].b]--;
			for (int i = 9; i >= 0; i--)
			{
				for (int j = 1; j <= cnt[i]; j++)
				{
					printf("%d", i);
				}
			}
			cout << ans << endl;
		}
	return TIME;
}

链接：https://ac.nowcoder.com/acm/contest/5668/G
来源：牛客网

时间限制：C/C++ 3秒，其他语言6秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
You are given a graph containing n vertices and m edges. Vertices are numbered from 0 to n-1. Initially, vertex i belongs to group i. We define a group A is connected to group B if and only if there exists at least an edge that connects the two vertices which belong to A and B respectively.

Now we will do q operations on this graph. The i-th operation is represented by an integer o_io 
i
​	
 .

In i-th operation, if there are no vertices belong to group o_io 
i
​	
 , nothing happens. Otherwise, for all vertices belong to a group which is connected to o_io 
i
​	
 , those vertices will belong to group  o_io 
i
​	
  after this operation.

Now you are also given the q operations. Please answer each vertex belongs to which group after all operations.
输入描述:
The first line contains one integer t (1 \le t \le 1.6 \times 10^51≤t≤1.6×10 
5
 ) --- the number of test cases.

The first line of each test contains two positive integers n and m (2 \le n \le 8 \times 10^52≤n≤8×10 
5
 , 1 \le m \le 8 \times 10^51≤m≤8×10 
5
 ) --- the number of vertices and edges in the given graph.

The following are m lines. Each of them contains two integers x and y, indicating there is an edge between vertex x and vertex y (0 \le x < y < n0≤x<y<n, there are no duplicate edges in the same test)

The following line contains one integer q (1 \le q \le 8 \times 10^51≤q≤8×10 
5
 ) -- the number of operations in this test. Then there is one more line contains q integers o_1, o_2, \ldots, o_qo 
1
​	
 ,o 
2
​	
 ,…,o 
q
​	
  (0 \le o_i < n0≤o 
i
​	
 <n).

The sum of n across the test cases doesn't exceed 8 \times 10^58×10 
5
 .

The sum of m across the test cases doesn't exceed 8 \times 10^58×10 
5
 .

And the sum of q across the test cases doesn't exceed 8 \times 10^58×10 
5
 .
输出描述:
For each test, output one line contains n integers --- the i-th integer of them representing the group that the vertex i-1 belongs to.
示例1
输入
复制
5
4 3
0 1
1 2
2 3
4
0 1 3 0
4 3
0 1
1 2
2 3
2
0 2
4 3
0 1
1 2
2 3
2
0 3
4 1
1 3
1
2
5 5
0 1
0 2
1 2
1 3
3 4
3
4 4 0
输出
复制
0 0 0 0
2 2 2 2
0 0 3 3
0 1 2 3
0 0 0 0 0
说明
Take the first test for example:

Initially, the four vertex is belong to 0, 1, 2, 3 respectively.

After the first operation, the four vertex is belong to 0, 0, 2, 3 respectively.

After the second operation, because there is no vertex belong to 1 now. The four vertex is still belong to 0, 0, 2, 3 respectively.

After the third operation, the four vertex is belong to 0, 0, 3, 3 respectively.

After the last operation, the four vertex is belong to 0, 0, 0, 0 respectively.
题意：给出一个图，再给出n次合并，将跟group i相连的group 合并，问最终每个点属于的group。
做法：并查集，链表，直接O1合并边。
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <string>
#include <bits/stdc++.h>
using namespace std;
#ifdef LOCAL
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
const int N = 2e6 + 10;
list<int>G[N];
int pre[N];
int find(int x)
{
	if (x != pre[x])
		x = pre[x] = find(pre[x]);
	return x;
}
void merge(int x, int y)
{
	x = find(x);
	y = find(y);
	if (x == y)
		return;
	pre[y] = x;
	G[x].splice(G[x].end(), G[y]);
	G[y].clear();
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int n, m;
		scanf("%d%d", &n, &m);
		for (int i = 1; i <= n; i++)
		{
			pre[i] = i;
			G[i].clear();
		}
		for (int i = 1; i <= m; i++)
		{
			int u, v;
			scanf("%d%d", &u, &v);
			u++, v++;
			G[u].push_back(v);
			G[v].push_back(u);
		}
		int q;
		scanf("%d", &q);
		for (int i = 1; i <= q; i++)
		{
			int num;
			scanf("%d", &num);
			num++;
			if (find(num) != num)
				continue;
			vector<int>v;
			for (auto &j : G[num])
			{
				if (find(j) != num)
					v.push_back(j);
			}
			G[num].clear();
			for (auto &j : v)
			{
				merge(num, j);
			}
		}
		for (int i = 1; i <= n; i++)
			printf("%d ", find(i) - 1);
		putchar('\n');
	}
	return TIME;
}
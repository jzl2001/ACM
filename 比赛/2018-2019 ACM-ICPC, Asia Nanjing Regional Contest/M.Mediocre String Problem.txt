https://codeforces.com/gym/101981
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int N = 1e6 + 10;
const int M = 5e4 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
#ifdef LOCAL
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
char p[N];
char s[N];
int exnex[N];
int extend[N];
void getexnext(char* p, int m)
{
	int i = 0, j;
	exnex[0] = m;
	while (i + 1 < m && p[i] == p[i + 1])
		i++;
	exnex[1] = i;
	int k = 1 + i, po = 1;//k是最远到达点, po是其起点
	for (int i = 2; i < m; i++)
	{
		if (exnex[i - po] < k - i) // 当前相同的字符， 相加不到k, 则直接赋值
			exnex[i] = exnex[i - po];
		else
		{
			j = k - i;
			if (j < 0)
				j = 0;
			while (i + j < m && p[i + j] == p[j]) // 只确定已知的部分， 超过k的部分已经匹配
				j++;
			exnex[i] = j;
			k = i + j, po = i;
		}
	}
}
void exkmp(char* s, char* p, int n, int m)
{
	getexnext(p, m);
	int i = 0, j;
	while (s[i] == p[i] && i < m && i < n)
		i++;
	extend[0] = i;
	int k = i, po = 0;
	for (int i = 1; i < n; i++)
	{
		if (exnex[i - po] < k - i)
			extend[i] = exnex[i - po];
		else
		{
			j = k - i;
			if (j < 0)
				j = 0;
			while (i + j < n && j < m && s[i + j] == p[j])
				j++;
			extend[i] = j;
			k = i + j, po = i;
		}
	}
}
int record[N];
struct Palindrome_tree
{
	int nxt[N][26];
	int fail[N]; // 当前节点最长回文后缀的节点
	int len[N]; // 当前节点表示的回文串的长度
	int cnt[N]; // 当前节点回文串的个数， 在getcnt后可得到全部
	int sed[N]; //以当前节点为后缀的回文串的个数，我们可以通过record来记录以当前字符为结尾的回文串的个数
	int tot; // 节点个数
	int last; // 上一个节点
	void init()
	{
		tot = 0;
		memset(fail, 0, sizeof fail);
		memset(cnt, 0, sizeof cnt);
		memset(sed, 0, sizeof sed);
		memset(len, 0, sizeof len);
		memset(nxt, 0, sizeof nxt);
	}
	void build()
	{
		len[0] = 0, len[1] = -1; // 0为偶数长度根， 1为奇数长度根
		tot = 1, last = 0;
		fail[0] = 1;
	}
	int getfail(char *s, int x, int n)
	{
		while (s[n - len[x] - 1] != s[n]) // 比较x节点回文串新建两端是否相等
			x = fail[x]; // 若不同， 再比较x后缀回文串两端
		return x;
	}
	void insert(char* s, int n)
	{
		for (int i = 1; i <= n; i++)
		{
			int c = s[i] - 'a';
			int p = getfail(s, last, i);// 得到第i个字符可以加到哪个节点的两端形成回文串 
			if (!nxt[p][c])
			{
				tot++;
				len[tot] = len[p] + 2;  // 在p节点两端添加两个字符
				fail[tot] = nxt[getfail(s, fail[p], i)][c]; //tot点的后缀回文，可以由上一个节点的后缀回文尝试得到  
				sed[tot] = sed[fail[tot]] + 1; // 以当前节点为结尾的回文串个数
				nxt[p][c] = tot; // 新建节点
			}
			last = nxt[p][c]; // 当前节点成为上一个节点
			cnt[last]++; //当前节点回文串++
			record[i] = sed[last];//可以记录结尾为第i个字符的回文串是哪个
		}
	}
	void get_cnt()
	{
		for (int i = tot; i > 0; i--)
			cnt[fail[i]] += cnt[i];
		//fail[i] 的节点 为 i 节点的后缀回文串， 所以个数相加
	}
}pdt;
int main()
{
#ifdef LOCAL
	freopen("E:\\input.txt", "r", stdin);
	//freopen("E:\\output.txt", "w", stdout);
#endif
	scanf("%s", s + 1);
	scanf("%s", p + 1);
	int n = strlen(s + 1);
	int m = strlen(p + 1);
	reverse(s + 1, s + n + 1);
	exkmp(s + 1, p + 1, n, m);
	pdt.build();
	pdt.insert(s, n);
	ll ans = 0;
	for (int i = 1; i <= n; i++)
	{
		ans += 1LL * extend[i - 1] * record[i - 1]; // (extend下标从0开始的，所以减1)
	}
	cout << ans << endl;
	return TIME;
}

/*
文本串反过来
然后exkmp求LCP
反过来相同等价于没翻转前对称
然后我们判i - 1的结尾有多少个回文串
例如
 abbaaba
 abbba
 倒着数第四位跟下面串的LCP是2，这个时候上一个串倒数第三位，以这位结尾的回文串的个数是3
 即中间这三个回文串都可以当中间的东西，然后下面这个串的前两位(一共长度为1，长度为2的前缀两种)
 直接拼接到这三个回文串后面即可，方案数就是record[i - 1] * extend[i]。
*/

https://nanti.jisuanke.com/t/A1949
n个人打牌，最开始每个人五张牌，最后一个人可能不到五张
第一个人先出最小的，然后轮流出牌，有人能出下一张则出
否则可以出2，如果都不能管住这个人则再从牌库发牌。
直接模拟，纸牌游戏。
Feeling bored, a group of hamsters decide to play a kind of card game named "GDY".

"GDY" is a kind of card game. To begin with, we pile up 
m
 cards with a number from 
1
−
13
 written on into a stack. Then every player, numbered from 
1
−
n
 in clockwise order, takes turn to draw 
5
 cards from the top of the stack. Every player draws 
5
 cards in a single time, and then his next player draws cards.

After all the players finish drawing their cards, player 
1
 will play exactly one card. For simplicity, player 
1
 will only play the minimum card in his hand, the order of cards is defined as follows:

3
<
4
<
5
<
6
<
7
<
8
<
9
<
10

<
11
<
12
<
13
<
1
<
2
.

After player 
1
's turn, players from 
2
−
n
 take their turns in clockwise order, For each player, he should play the card which is exactly the next one of the card played by previous player according the order above. For example, if the previous player played card 
4
, the current player must play card 
5
, not card 
6
,
7
 or any other card (except card 
2
).

Card 
2
 can be played at anyone's turn as long as his previous player didn't play card 
2
. If a player has a card can be played in his hand, he will always play it in his turn. If he can play both 
2
 and the next card in his turn, he will choose to play the next card first.

If a player can't play any card, he has to pass his turn and do nothing. If all the players can't play any card and pass their turns after player 
X
's turn, all the players from player 
X
 should draw one card from the card stack in clockwise order (include player 
X
). After that, player 
X
 will play the minimum card in his hand, and the game goes on.

Once there is no card in the stack, skip all the chance for drawing cards, which means if a player need to draw card according the rules above, he will simply ignore this rule and do nothing. But it's guaranteed that every player will have at least one card in hand before player 
1
's first turn.

If one player has no card in his hand at anytime, he will become the winner, and the game ends. Other players should calculate their penalties. The penalty of a player is defined as the sum of numbers written on the cards in his hand.

Now you have known the information about a round of GDY, please find out the result of this round.

Input
There are multiple test cases in the input data.

The first line contains a integer 
T
: number of test cases. 
T
≤
50
.

For each test case, the first line contain 
2
 integers 
n
,
m
, representing the number of players, the number of cards in the original stack. 
2
≤
n
≤
200
,
m
≤
20000
.

The next line contains 
m
 integers separated by a blank, representing the original stack. The leftmost one is the top of the stack and the rightmost is the bottom.

For all the test cases, it's guaranteed that the sum of 
m
 doesn't exceed 
4
×
10
5
.

Output
For each test case, print "Case #
x
:"(without quotes) in the first line, where 
x
 is the test case number.

Then, print 
n
 lines representing the result of each player.

For the 
i
-th line, if player 
i
 wins, print a string"Winner"(without quotes) at this line.

Otherwise, print a integer, the penalty of the 
i
-th player.

Sample Input
2
2 10
3 5 7 9 11 4 6 8 10 12
3 15
4 5 6 7 8 9 10 11 12 13 2 2 2 2 2
Sample Output
Case #1:
Winner
12
Case #2:
26
55
Winner
Sponsor
#include <iostream>
#include <bits/stdc++.h>
//#include <unordered_map>
#include <assert.h>
#include <time.h>
#include <algorithm>
#include <stdio.h>
#include <string.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 2e6 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
int a[210][17];
int tot[210];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	int kcase = 0;
	while (t--)
	{
		queue<int>q;
		int top = 0;
		int n, m;
		cin >> n >> m;
		for (int i = 0; i < n; i++)
			tot[i] = 0, memset(a[i], 0, sizeof a[i]);
		for (int i = 1; i <= m; i++)
		{
			int num;
			scanf("%d", &num);
			q.push(num);
		}
		for (int i = 0; i < n - 1; tot[i] = 5, i++)
			for (int j = 1; j <= 5; j++)
			{
				int num = q.front();
				if (num <= 2)
					num += 13;
				a[i][num]++;
				q.pop();
			}
		for (int i = 1; i <= min(5, m - (n - 1) * 5); i++)
		{
			tot[n - 1]++;
			int num = q.front();
			if (num <= 2)
				num += 13;
			a[n - 1][num]++;
			q.pop();
		}
		int np = 0, nc;
		for (int i = 3; i <= 15; i++)
		{
			if (a[0][i])
			{
				nc = i;
				break;
			}
		}
		int cnt = 1, win = 1;
		tot[np]--;
		a[0][nc]--;
		while (true)
		{
			if (!tot[np])
			{
				win = np;
				break;
			}
			if (a[(np + 1) % n][nc + 1])
			{
				a[(np + 1) % n][nc + 1]--;
				np = (np + 1) % n, nc = nc + 1;
				tot[np]--;
			}
			else
				if (a[(np + 1) % n][15] && nc != 15)
				{
					a[(np + 1) % n][15]--;
					np = (np + 1) % n, nc = 15;
					tot[np]--;
				}
				else
				{
					int flag = 1;
					int id = (np + 1) % n;
					while (id != np)
					{
						if (a[id][nc + 1])
						{
							flag = 0;
							np = id;
							nc++;
							break;
						}
						if (a[id][15] && nc != 15)
						{
							flag = 0;
							np = id;
							nc = 15;
							break;
						}
						id = (id + 1) % n;
					}
					if (!flag)
					{
						a[np][nc]--;
						tot[np]--;
						continue;
					}
					id = np;
					for (int j = 1; j <= n && !q.empty(); j++)
					{
						int num = q.front();
						if (num <= 2)
							num += 13;
						a[id][num]++;
						tot[id]++;
						id = (id + 1) % n;
						q.pop();
					}
					for (int i = 3; i <= 15; i++)
					{
						if (a[np][i])
						{
							nc = i;
							break;
						}
					}
					a[np][nc]--;
					tot[np]--;
				}					
		}
		printf("Case #%d:\n", ++kcase);
		for (int i = 0; i < n; i++)
		{
			int sum = a[i][14] + a[i][15] * 2;
			for (int j = 3; j <= 13; j++)
				sum += j * a[i][j];
			if (win == i)
				puts("Winner");
			else
				printf("%d\n", sum);
		}
	}
	return TIME;
}
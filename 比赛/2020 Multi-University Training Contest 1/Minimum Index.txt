Minimum Index
Time Limit: 3000/1500 MS (Java/Others)    Memory Limit: 524288/524288 K (Java/Others)
Total Submission(s): 302    Accepted Submission(s): 75


Problem Description
Let s=s1 s2⋯sn be a string of length n. For any integer k between 1 to n, the kth suffix of s is defined as sk sk+1⋯sn. For example, the 4th suffix of “contest” is “test” and the 1st suffix of “suffix” is “suffix” itself.

One can consider lexicographically smallest suffix of s. Let the kth suffix is lexicographically minimum among all suffixes of s. Conveniently, let’s call such k minimum index of s. Given a string t=t1 t2⋯tn, your task is to calculate the sum of (minimum index of t1 t2⋯ti)⋅1112i−1 over all i=1,2,3,⋯,n. This value may be too large, you are only required to print it modulo 109+7.
 

Input
The first line of the input contains a single integer T (1≤T≤10 000), the number of test cases. Each of the next T lines contains a non-empty string with at most 106 lowercase English letters. The total length of the input string over all test cases doesn’t exceed 2⋅107.
 

Output
For each test case, you should print the answer in a single line.
 

Sample Input
1
aab
 

Sample Output
1238769

Hint

The minimum index of “a”, “aa”, “aab” is 1, 2, 1 respectively. So the answer is (1+2∙1112+1112^2) mod (10^9+7)=1238769.
 
 

Source
2020 Multi-University Training Contest 1
 

Recommend
liuyiding   |   We have carefully selected several similar problems for you:  6762 6761 6760 6759 6758 
//第i个前缀的最小后缀下标。
#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 10;
const int mod = 1e9 + 7;
typedef long long ll;
int ans[N];
char s[N];
ll a[N];
void duval(char* s, int n)
{
	int i = 0;
	while (i < n)
	{
		ans[i] = i;
		int j = i + 1, k = i;
		while (j < n && s[k] <= s[j])
		{
			if (s[k] < s[j])
				k = i, ans[j] = k;
			else
			{
				ans[j] = ans[k] + j - k;
				k++;
			}
			j++;
		}
		while (i <= k)
			i += j - k;	
	}
	return ;
}
int main()
{
#ifdef LOCAL
	freopen("E:\\input.txt", "r", stdin);
#endif
	a[0] = 1;
	for (int i = 1; i < N; i++)
	{
		a[i] = (a[i - 1] * 1112) % mod;
	}
	int t;
	cin >> t;
	while (t--)
	{
		scanf("%s", s);
		int n = strlen(s);
		duval(s, n);
		ll sum = 0;
		for (int i = 0; i < n; i++)
		{
			sum = (sum + (ans[i] + 1) * a[i]) % mod;
		}
		printf("%lld\n", sum);
	}
	return 0;
}
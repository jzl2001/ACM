#include <bits/stdc++.h>
#include <time.h>
#include <string>
#include <stdlib.h>
#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <queue>
#include <string.h>
#include <functional>
#include <set>
//#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 110;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
char s[110];
int fail[N];
int sed[N];
int nxt[N][26];
int sum[N];
int tot;
int ans;
struct M
{
	int m[110][110];
	M()
	{
		memset(m, 0, sizeof m);
	}
};
M mul(M a, M b)
{
	M ans;
	for (int i = 0; i <= tot; i++)
	{
		for (int j = 0; j <= tot; j++)
		{
			for (int k = 0; k <= tot; k++)
			{
				ans.m[i][j] = 1LL * (ans.m[i][j] + 1LL * a.m[i][k] * b.m[k][j]) % mod;
			}
		}
	}
	return ans;
}
int getID(char x)
{
	return x - 'a';
}
void insert(char* u)
{
	char* w = u;
	int rk = 0;
	while (*w)
	{
		int x = getID(*w);
		if (!nxt[rk][x])
			nxt[rk][x] = ++tot;
		rk = nxt[rk][x];
		w++;
	}
	sed[rk] = 1;
}
void build()
{
	queue<int>q;
	for (int i = 0; i < 26; i++)
		if (nxt[0][i])
			q.push(nxt[0][i]);
	while (!q.empty())
	{
		int f = q.front();
		q.pop();
		for (int i = 0; i < 26; i++)
		{
			if (nxt[f][i])
				fail[nxt[f][i]] = nxt[fail[f]][i], q.push(nxt[f][i]);
			else
				nxt[f][i] = nxt[fail[f]][i];
			sed[nxt[f][i]] |= sed[nxt[fail[f]][i]];
		}
	}
}
void fpow(int n)
{
	M b, a;
	for (int i = 0; i <= tot; i++)
		b.m[i][i] = 1;
	for (int i = 0; i <= tot; i++)
	{
		if (sed[i])
			continue;
		for (int j = 0; j < 26; j++)
		{
			if (sed[nxt[i][j]])
				continue;
			a.m[i][nxt[i][j]]++;
		}
	}
	while (n)
	{
		if (n & 1)
			b = mul(b, a);
		n >>= 1;
		a = mul(a, a);
	}
	for (int i = 0; i <= tot; i++)
	{
		ans = (ans + b.m[0][i]) % mod;
	}
	cout << ans << endl;
}
void init()
{
	tot = 0;
	memset(sum, 0, sizeof sum);
	memset(nxt, 0, sizeof nxt);
	memset(sed, 0, sizeof sed);
	memset(fail, 0, sizeof fail);
}
int main(){
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n, m;
	cin >> m >> n;
	for (int i = 1; i <= n; i++)
	{
		int x;
		scanf("%d", &x);
		scanf("%s", s);
		insert(s);
	}
	build();
	fpow(m);
	return TIME;
}

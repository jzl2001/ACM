New Equipments
Time Limit: 2000/2000 MS (Java/Others)    Memory Limit: 524288/524288 K (Java/Others)
Total Submission(s): 1118    Accepted Submission(s): 274


Problem Description
Little Q's factory recently purchased m pieces of new equipment, labeled by 1,2,…,m.

There are n workers in the factory, labeled by 1,2,…,n. Each worker can be assigned to no more than one piece of equipment, and no piece of equipment can be assigned to multiple workers. If Little Q assigns the i-th worker to the j-th piece of equipment, he will need to pay ai×j2+bi×j+ci dollars.

Now please for every k (1≤k≤n) find k pairs of workers and pieces of equipment, then assign workers to these pieces of equipment, such that the total cost for these k workers is minimized.
 

Input
The first line of the input contains a single integer T (1≤T≤10), the number of test cases.

For each case, the first line of the input contains two integers n and m (1≤n≤50, n≤m≤108), denoting the number of workers and the number of pieces of equipment.

Each of the following n lines contains three integers ai,bi and ci (1≤ai≤10, −108≤bi≤108, 0≤ci≤1016, b2i≤4aici), denoting a worker.
 

Output
For each test case, output a single line containing n integers, the k-th (1≤k≤n) of which denoting the minimum possible total cost for k pairs of workers and pieces of equipment.
 

Sample Input
1
3 5
2 3 10
2 -3 10
1 -1 4
 

Sample Output
4 15 37
 

Source
2020 Multi-University Training Contest 2
 

Recommend
liuyiding   |   We have carefully selected several similar problems for you:  6782 6781 6780 6779 6778 
题意：给出n个任务的a，b，c。再给出m求分配1~m使得n个任务的代价总和最小。每个人任务的代价即a * j * j + b * j + c。
每个点建边极值点附近五十个点。然后跑最小费用流。每次找的过程就是分配一个任务，所以每次spfa后输出即可。
<网络流><费用流>
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int N = 6e3 + 10;
const int M = 5e4 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
#ifdef LOCAL
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
unordered_map<int, int>mp;
struct edge
{
	int v;
	ll w;
	int c, nxt; 
}e[M * 2]; 

int h[N], idx; 
void AddEdge(int u, int v, ll w, int c) 
{
	e[idx] = { v, w, c, h[u] };
	h[u] = idx++; 
	e[idx] = { u, -w, 0, h[v] }; 
	h[v] = idx++;
}

ll dis[N];
int pre[N]; 
bool inq[N]; 
bool SPFA(int st, int ed) 
{
	queue<int> q;
	memset(dis, 0x3f, sizeof(dis));
	memset(pre, -1, sizeof(pre));
	dis[st] = 0;
	q.push(st), inq[st] = 1;
	while (!q.empty())
	{
		int u = q.front(); q.pop(), inq[u] = 0;
		for (int i = h[u]; ~i; i = e[i].nxt)
		{
			int v = e[i].v;
			ll w = e[i].w;
			int c = e[i].c; 
			if (dis[v] > dis[u] + w && c) 
			{
				dis[v] = dis[u] + w; 
				pre[v] = i; 
				if (!inq[v]) 
					q.push(v), inq[v] = 1;
			}
		}
	}
	return pre[ed] != -1; 
}
void MCMF(int st, int ed, ll &cost, int &flow, int n) 
{
	cost = flow = 0;
	int cnt = 0;
	while (SPFA(st, ed))
	{
		int mi = INF; 
		for (int i = pre[ed]; ~i; i = pre[e[i ^ 1].v]) 
			mi = min(mi, e[i].c);
		flow += mi;
		for (int i = pre[ed]; ~i; i = pre[e[i ^ 1].v])
		{
			e[i].c -= mi, e[i ^ 1].c += mi;
			cost += mi * e[i].w; 
		}
		cnt++;
		if (cnt != n)
			printf("%lld ", cost);
		else
			printf("%lld\n", cost);
	}
}
struct node
{
	ll a, b, c;
}x[N];
ll calc(node y, int j)
{
	return y.a * j * j + y.b * j + y.c;
}
int main()
{
#ifdef LOCAL
	freopen("E:\\input.txt", "r", stdin);
	freopen("E:\\output.txt", "w", stdout);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		idx = 0;
		memset(h, -1, sizeof h);
		mp.clear();
		int n, m;
		scanf("%d%d", &n, &m);
		AddEdge(0, 0, 0, n);
		for (int i = 1; i <= n; i++)
		{
			scanf("%lld%lld%lld", &x[i].a, &x[i].b, &x[i].c);
			AddEdge(0, i, 0, 1);
		}
		int cnt = n;
		for (int i = 1; i <= n; i++)
		{
			int mid = -x[i].b / (2 * x[i].a);
			int l, r;
			if (mid <= 0)
				l = 1, r = min(n, m);
			else
				if (mid > m)
					l = max(1, m - n + 1), r = m;
				else
					l = max(1, mid - n - 2), r = min(mid + n + 2, m);
			for (int j = l; j <= r; j++)
			{
				if (mp.find(j) != mp.end())
					AddEdge(i, mp[j], calc(x[i], j), 1);
				else
					++cnt, AddEdge(i, cnt, calc(x[i], j), 1), mp[j] = cnt, AddEdge(cnt, 6000, 0, 1);
			}
		}
		ll cost;
		int flow;
		MCMF(0, 6000, cost, flow, n);
	}
	return TIME;
}

A sequence of integer 
{
a
n
}
 can be expressed as:

a
n
=
⎧
⎪
⎪
⎨
⎪
⎪
⎩
0
,
n
=
0
2
,
n
=
1
3
a
n
−
1
−
a
n
−
2
2
+
n
+
1
,
n
>
1
Now there are two integers 
n
 and 
m
. I'm a pretty girl. I want to find all 
b
1
,
b
2
,
b
3
⋯
b
p
 that 
1
≤
b
i
≤
n
 and 
b
i
 is relatively-prime with the integer 
m
. And then calculate:
p
∑
i
=
1
 
a
b
i
But I have no time to solve this problem because I am going to date my boyfriend soon. So can you help me?

Input
Input contains multiple test cases ( about 
15000
 ). Each case contains two integers 
n
 and 
m
. 
1
≤
n
,
m
≤
10
8
.

Output
For each test case, print the answer of my question(after mod 
1
,
000
,
000
,
007
).

Hint
In the all integers from 
1
 to 
4
, 
1
 and 
3
 is relatively-prime with the integer 
4
. So the answer is 
a
1
+
a
3
=
14
.

Sample Input
4 4
Sample Output
14

给出一个数列，求以n范围内跟m互质的数字为下标的元素之和。
容斥，原数列可以看出就是i * (i + 1)。
∑n = ∑ i * i + i， 即是平方和公式跟等差数列求和
= n * (n + 1) * (2 * n + 1) / 6 + n * (n + 1) / 2。
容斥，枚举m的质因子，比如2，4，6 每项提出个2的平方，则原来式子
就是4 * (1 + 2 * 2 + 3 * 3)，等差数列的求和公式则是提取2即可
同理3，6，9，12一样。
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 2e4 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
ll INV6 = 166666668;
ll INV2 = 500000004;
ll calc(ll mul, ll len)
{
    ll res =
    (mul * len % mod * (len + 1) % mod * (2 * len + 1) % mod * INV6 % mod + (len * (len + 1) % mod * INV2 % mod)) % mod;
    //assert(res > 0);
    return mul * res % mod;
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
    ll n, m;
    while (cin >> n >> m)
    {
        vector<int>a;
        int k = sqrt(m);
        int u = m;
        for (int i = 2; i <= k; i++)
        {
            int flag = 0;
            while (m % i == 0)
                flag = 1, m /= i;
            if (flag)
            {
                a.push_back(i);
            }
            k = sqrt(m);
        }
        if (m >= k && m != 1)
            a.push_back(m);
        ll ans = calc(1, n);
        //cout << ans << endl;
        int sz = a.size();
        for (int i = 1; i < (1 << sz); i++)
        {
            ll mul = 1;
            ll num = 0;
            for (int j = 0; j < sz; j++)
            {
                if (i & (1 << j))
                    mul *= a[j], num++;
            }
           // cout << mul << endl;
            if (num & 1)
                ans = (ans - calc(mul, n / mul) + mod) % mod;
            else
                ans = (ans + calc(mul, n / mul)) % mod;
        }
        printf("%lld\n", ans);
    }
	return TIME;
}

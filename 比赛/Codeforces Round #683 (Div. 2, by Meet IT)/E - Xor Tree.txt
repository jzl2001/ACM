E. Xor Tree
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
For a given sequence of distinct non-negative integers (b1,b2,…,bk) we determine if it is good in the following way:

Consider a graph on k nodes, with numbers from b1 to bk written on them.
For every i from 1 to k: find such j (1≤j≤k, j≠i), for which (bi⊕bj) is the smallest among all such j, where ⊕ denotes the operation of bitwise XOR (https://en.wikipedia.org/wiki/Bitwise_operation#XOR). Next, draw an undirected edge between vertices with numbers bi and bj in this graph.
We say that the sequence is good if and only if the resulting graph forms a tree (is connected and doesn't have any simple cycles).
It is possible that for some numbers bi and bj, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

You can find an example below (the picture corresponding to the first test case).

Sequence (0,1,5,2,6) is not good as we cannot reach 1 from 5.

However, sequence (0,1,5,2) is good.


You are given a sequence (a1,a2,…,an) of distinct non-negative integers. You would like to remove some of the elements (possibly none) to make the remaining sequence good. What is the minimum possible number of removals required to achieve this goal?

It can be shown that for any sequence, we can remove some number of elements, leaving at least 2, so that the remaining sequence is good.

Input
The first line contains a single integer n (2≤n≤200,000) — length of the sequence.

The second line contains n distinct non-negative integers a1,a2,…,an (0≤ai≤109) — the elements of the sequence.

Output
You should output exactly one integer — the minimum possible number of elements to remove in order to make the remaining sequence good.

Examples
inputCopy
5
0 1 5 2 6
outputCopy
1
inputCopy
7
6 9 8 7 3 5 2
outputCopy
2
Note
Note that numbers which you remove don't impact the procedure of telling whether the resulting sequence is good.

It is possible that for some numbers bi and bj, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.
题意：给出n个数字，每个数字会跟其他n-1个数字中异或最小值建一个边，询问最少删除几个点使得最后成为一棵树。
思路：二进制分治，一个最高位二进制对于另一种肯定是只能留一个。
#include<bits/stdc++.h>
using namespace std;
const int N = 2e5 * 31 + 10;
const int mod = 1e9 + 7;
typedef long long ll;

int a[N];
int nxt[N][2];
int d[N][2];
int dfs(int x)
{
	int res = 0;
	if (nxt[x][0])
		res = max(res, dfs(nxt[x][0]) + !!nxt[x][1]);
	if (nxt[x][1])
		res = max(res, dfs(nxt[x][1]) + !!nxt[x][0]);
	return res;
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n;
	cin >> n;
	int cnt = 0;
	for (int i = 1; i <= n; i++)
	{
		int num;
		scanf("%d", &num);
		int rk = 0;
		for (int j = 31; j >= 0; j--)
		{
			int tmp = (num >> j) & 1;
			if (!nxt[rk][tmp])
				nxt[rk][tmp] = ++cnt;
			rk = nxt[rk][tmp];
		}
	}
	cout << n - dfs(0) - 1 << endl;
	return 0;
}
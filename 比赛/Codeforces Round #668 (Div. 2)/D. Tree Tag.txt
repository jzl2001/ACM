https://codeforces.ml/contest/1405/problem/D
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Alice and Bob are playing a fun game of tree tag.

The game is played on a tree of n vertices numbered from 1 to n. Recall that a tree on n vertices is an undirected, connected graph with n−1 edges.

Initially, Alice is located at vertex a, and Bob at vertex b. They take turns alternately, and Alice makes the first move. In a move, Alice can jump to a vertex with distance at most da from the current vertex. And in a move, Bob can jump to a vertex with distance at most db from the current vertex. The distance between two vertices is defined as the number of edges on the unique simple path between them. In particular, either player is allowed to stay at the same vertex in a move. Note that when performing a move, a player only occupies the starting and ending vertices of their move, not the vertices between them.

If after at most 10100 moves, Alice and Bob occupy the same vertex, then Alice is declared the winner. Otherwise, Bob wins.

Determine the winner if both players play optimally.

Input
Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤104). Description of the test cases follows.

The first line of each test case contains five integers n,a,b,da,db (2≤n≤105, 1≤a,b≤n, a≠b, 1≤da,db≤n−1)  — the number of vertices, Alice's vertex, Bob's vertex, Alice's maximum jumping distance, and Bob's maximum jumping distance, respectively.

The following n−1 lines describe the edges of the tree. The i-th of these lines contains two integers u, v (1≤u,v≤n,u≠v), denoting an edge between vertices u and v. It is guaranteed that these edges form a tree structure.

It is guaranteed that the sum of n across all test cases does not exceed 105.

Output
For each test case, output a single line containing the winner of the game: "Alice" or "Bob".

Example
inputCopy
4
4 3 2 1 2
1 2
1 3
1 4
6 6 1 2 5
1 2
6 5
2 3
3 4
4 5
9 3 9 2 5
1 2
1 6
1 9
1 3
9 5
7 9
4 8
4 3
11 8 11 3 3
1 2
11 9
4 9
6 5
2 10
3 2
5 9
8 3
7 4
7 10
outputCopy
Alice
Bob
Alice
Alice
Note
In the first test case, Alice can win by moving to vertex 1. Then wherever Bob moves next, Alice will be able to move to the same vertex on the next move.


In the second test case, Bob has the following strategy to win. Wherever Alice moves, Bob will always move to whichever of the two vertices 1 or 6 is farthest from Alice.

题意：给出一棵树，两个人在树上有起始位置和最大移动步数，问A能否抓到B，分类讨论。
Alice先手，如果第一步就抓到则win，否则如果Alice可以走到直径的中点，如果da * 2> dis，则win。
若Bob想赢则需要db > 2 * da,这样每次都可以跳出Alice的可跳范围。
<博弈>
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
const int mod = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); };
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
const int N = 1e5 + 10;
vector<int>G[N];
int st, mx;
int d[N];
void dfs1(int x, int fa)
{
	for (auto &i : G[x])
	{
		if (fa == i)
			continue;
		d[i] = d[x] + 1;
		dfs1(i, x);
	}
	if (d[x] > d[st])
		st = x;
}
void dfs2(int x, int fa, int deep)
{
	mx = max(mx, deep);
	for (auto &i : G[x])
	{
		if (fa == i)
			continue;
		dfs2(i, x, deep + 1);
	}
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		st = 0;
		int n, a, b, da, db, u, v;
		scanf("%d%d%d%d%d", &n, &a, &b, &da, &db);
		for (int i = 1; i <= n; i++)
		{
			G[i].clear();
		}
		for (int i = 1; i < n; i++)
		{
			scanf("%d%d", &u, &v);
			G[u].push_back(v);
			G[v].push_back(u);
		}
		d[a] = 0;
		dfs1(a, 0);
		if (d[b] <= da)
		{
			puts("Alice");
			continue;
		}
		mx = 0;
		dfs2(st, 0, 0);
		if (da * 2 >= mx)
		{
			puts("Alice");
			continue;
		}
		if (db > 2 * da)
		{
			puts("Bob");
		}
		else
			puts("Alice");
	}
	return TIME;
}

time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You're given an array a of n integers, such that a1+a2+⋯+an=0.

In one operation, you can choose two different indices i and j (1≤i,j≤n), decrement ai by one and increment aj by one. If i<j this operation is free, otherwise it costs one coin.

How many coins do you have to spend in order to make all elements equal to 0?

Input
Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤5000). Description of the test cases follows.

The first line of each test case contains an integer n (1≤n≤105)  — the number of elements.

The next line contains n integers a1,…,an (−109≤ai≤109). It is given that ∑ni=1ai=0.

It is guaranteed that the sum of n over all test cases does not exceed 105.

Output
For each test case, print the minimum number of coins we have to spend in order to make all elements equal to 0.

Example
inputCopy
7
4
-3 5 -3 1
2
1 -1
4
-3 2 -3 4
4
-1 1 1 -1
7
-5 7 -6 -4 17 -13 4
6
-1000000000 -1000000000 -1000000000 1000000000 1000000000 1000000000
1
0
outputCopy
3
0
4
1
8
3000000000
0
Note
Possible strategy for the first test case:

Do (i=2,j=3) three times (free), a=[−3,2,0,1].
Do (i=2,j=1) two times (pay two coins), a=[−1,0,0,1].
Do (i=4,j=1) one time (pay one coin), a=[0,0,0,0].
模拟，倒着记录当前可用的。
#include <iostream>
#include <set>
#include <bits/stdc++.h>
//#include <unordered_map>
#include <assert.h>
#include <time.h>
#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <string>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }

ll a[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		ll sum = 0;
		cin >> n;
		for (int i = 1; i <= n; i++)
		{
			scanf("%lld", &a[i]);
		}
		ll ans = 0;
		for (int i = n; i >= 1; i--)
		{
			if (a[i] <= 0)
				sum += abs(a[i]);
			else
			{
				ll tmp = sum;
				sum -= min(sum, a[i]);
				a[i] -= min(tmp, a[i]);
				if (a[i])
					ans += abs(a[i]);
			}
		}
		cout << ans << endl;
	}
	return TIME;
}
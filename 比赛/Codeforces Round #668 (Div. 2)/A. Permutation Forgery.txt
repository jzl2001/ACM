time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).

Let p be any permutation of length n. We define the fingerprint F(p) of p as the sorted array of sums of adjacent elements in p. More formally,

F(p)=sort([p1+p2,p2+p3,…,pn−1+pn]).
For example, if n=4 and p=[1,4,2,3], then the fingerprint is given by F(p)=sort([1+4,4+2,2+3])=sort([5,6,5])=[5,5,6].

You are given a permutation p of length n. Your task is to find a different permutation p′ with the same fingerprint. Two permutations p and p′ are considered different if there is some index i such that pi≠p′i.

Input
Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤668). Description of the test cases follows.

The first line of each test case contains a single integer n (2≤n≤100)  — the length of the permutation.

The second line of each test case contains n integers p1,…,pn (1≤pi≤n). It is guaranteed that p is a permutation.

Output
For each test case, output n integers p′1,…,p′n — a permutation such that p′≠p and F(p′)=F(p).

We can prove that for every permutation satisfying the input constraints, a solution exists.

If there are multiple solutions, you may output any.

Example
inputCopy
3
2
1 2
6
2 1 6 5 4 3
5
2 4 3 1 5
outputCopy
2 1
1 2 5 6 3 4
3 1 5 2 4
Note
In the first test case, F(p)=sort([1+2])=[3].

And F(p′)=sort([2+1])=[3].

In the second test case, F(p)=sort([2+1,1+6,6+5,5+4,4+3])=sort([3,7,11,9,7])=[3,7,7,9,11].

And F(p′)=sort([1+2,2+5,5+6,6+3,3+4])=sort([3,7,11,9,7])=[3,7,7,9,11].

In the third test case, F(p)=sort([2+4,4+3,3+1,1+5])=sort([6,7,4,6])=[4,6,6,7].

And F(p′)=sort([3+1,1+5,5+2,2+4])=sort([4,6,7,6])=[4,6,6,7].

签到题，反着输出即可。
#include <iostream>
#include <set>
#include <bits/stdc++.h>
//#include <unordered_map>
#include <assert.h>
#include <time.h>
#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <string>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }

int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		cin >> n;
		vector<int>v;
		for (int i = 1; i <= n; i++)
		{
			int num;
			scanf("%d", &num);
			v.push_back(num);
		}
		reverse(v.begin(), v.end());
		for (auto &i : v)
		{
			printf("%d ", i);
		}
		puts("");
	}
	return TIME;
}

#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
 
#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 100000;
const int N = 3e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
int nxt[N << 1][26];
int sz[N << 1];
int deep[N << 1];
int ans[N << 1];
vector<int>v[N];
int cnt;
int n;
struct node
{
	int v, w;
};
vector<node>G[N];
int merge(int a, int b)
{
	if (!a || !b)
		return a | b;
	int idx = ++cnt;
	sz[idx] = 1;
	for (int i = 0; i < 26; i++)
	{
		nxt[idx][i] = merge(nxt[a][i], nxt[b][i]);
		sz[idx] += sz[nxt[idx][i]];
	}
	return idx;
}
void dfs(int x, int fa)
{
	int flag = 0;
	sz[x] = 1;
	for (auto &i : G[x])
	{
		int to = i.v;
		int w = i.w;
		if (to == fa)
			continue;
		flag = 1;
		deep[to] = deep[x] + 1;
		nxt[x][w] = to;
		dfs(to, x);
		sz[x] += sz[to];
	}
	ans[deep[x]] += sz[x];
	cnt = n;
	int u = 0;
	for (int i = 0; i < 26; i++)
		u = merge(u, nxt[x][i]);
	if (flag)
		ans[deep[x]] -= sz[u];
	else
		ans[deep[x]]--;
}
int main()
{
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	cin >> n;
	for (int i = 1; i <= n - 1; i++)
	{
		int u, v;
		char w;
		cin >> u >> v >> w;
		G[u].push_back({ v, w - 'a' });
		G[v].push_back({ u, w - 'a' });
	}
	dfs(1, 0);
	int mans = 0, idx = 0;
	for (int i = 0; i < n; i++)
	{
		if (ans[i] > mans)
			mans = ans[i], idx = i;
	}
	cout << n - ans[idx] << endl << idx + 1 << endl;
	return TIME;
}
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 524288/524288 K (Java/Others)
Total Submission(s): 474    Accepted Submission(s): 214
Special Judge

Problem Description
It's the night before Zhang3's birthday, and she's preparing for her birthday party in the classroom. She has brought a huge birthday cake and some powerful tomatoes, and has decorated almost every corner of the classroom. However, the blackboard is still empty. The last thing to do is to draw a beautiful pattern on it.

The blackboard is regarded as an infinite plane, each integer point (x,y) has an integer value as its color. At the very beginning, the color of every point is 0.

Zhang3 has n crayons, labeled 1,2,…,n. Painting with the ith crayon, you can replace the color of some chosen integer point (x,y) with color i. It is called a step, and she will draw the pattern step by step.

According to Zhang3's judgement of beautiful patterns, there's a restriction: Just before you paint (x,y) into some color i, the last four colors of i must appear among the adjacent points of (x,y). The last four colors of i means colors from (i−4) to (i−1), ignoring those non-positive ones. Two integer points are adjacent if their Euclid distance is exactly one. (Note that a point is not adjacent to itself.) If the condition above is not satisfied, the step is not allowed.

Zhang3 doesn't want to waste crayons, so the final pattern should contain at least one point with color n. Please help her find a way to draw such a beautiful pattern.
 

Input
The only line of the input contains an integer n(1≤n≤100), the number of crayons.
 

Output
Print the steps in chronological order, each in a separate line. Notice that you should not print the number of steps.

In the ith line, print three integers xi,yi,ci, separated by spaces, indicating the ith step is to paint (xi,yi) into color ci.

Your answer should satisfy |xi|,|yi|≤109,1≤ci≤n. The number of steps should not exceed 105. The output file should not be larger than 5MB.

It can be proved that there is always a solution. Any solution that meets all of the requirements will be accepted.
 

Sample Input
4
 

Sample Output
0 0 1
1 0 1
0 1 2
1 1 3
1 -1 2
1 0 4

Hint
1st step: paint (0, 0) into color 1.
000
010
000

2nd step: paint (1, 0) into color 1.
0000
0110
0000

3rd step: paint (0, 1) into color 2.
0000
0200
0110
0000

4th step: paint (1, 1) into color 3.
0000
0230
0110
0000

5th step: paint (1, -1) into color 2.
0000
0230
0110
0020
0000

6th step: paint (1, 0) into color 4.
0000
0230
0140
0020
0000
 
 

Source
2020 Multi-University Training Contest 4
<构造>
         (n - 2)
(n - 1)     n      (n - 4)
		 (n - 3)
(n - 1)、(n - 2)跟(n - 3)、(n - 4)相差值相同
(n - 1)、(n - 3)跟(n - 2)、(n - 4)也是。
 
         (n - 2)
(n - 1)     n      (n - 3) 
		 (n - 4)  这种的不能共用的不行
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int N = 1e3 + 500;
const int M = 4e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
#ifdef LOCAL
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
int d[2010][2010];
void dfs(int x, int y, int num)
{
	if (num > 1)
	{
		if (d[x - 1][y] != num - 1)
			dfs(x - 1, y, num - 1);
	}
	if (num > 2)
	{
		if (d[x][y - 1] != num - 2)
			dfs(x, y - 1, num - 2);
	}
	if (num > 3)
	{
		if (d[x][y + 1] != num - 3)
			dfs(x, y + 1, num - 3);
	}
	if (num > 4)
	{
		if (d[x + 1][y] != num - 4)
			dfs(x + 1, y, num - 4);
	}
	d[x][y] = num;
	printf("%d %d %d\n", x - 1000, y - 1000, num);
}
int main()
{
#ifdef LOCAL
//	freopen("E:\\input.txt", "r", stdin);
//	freopen("E:\\output.txt", "w", stdout);
#endif
	int n;
	cin >> n;
	dfs(1000, 1000, n);
	return TIME;
}
或者
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int N = 1e3 + 500;
const int M = 4e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
#ifdef LOCAL
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
int d[2010][2010];
void dfs(int x, int y, int num)
{
	if (num > 1)
	{
		if (d[x][y - 1] != num - 1)
			dfs(x, y - 1, num - 1);
	}
	if (num > 2)
	{
		if (d[x - 1][y] != num - 2)
			dfs(x - 1, y, num - 2);
	}
	if (num > 3)
	{
		if (d[x + 1][y] != num - 3)
			dfs(x + 1, y, num - 3);
	}
	if (num > 4)
	{
		if (d[x][y + 1] != num - 4)
			dfs(x, y + 1, num - 4);
	}
	d[x][y] = num;
	printf("%d %d %d\n", x, y, num);
}
int main()
{
#ifdef LOCAL
	freopen("E:\\input.txt", "r", stdin);
	freopen("E:\\output.txt", "w", stdout);
#endif
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
		dfs(1 + 1000, i + 1000 + 1, i);
	return TIME;
}

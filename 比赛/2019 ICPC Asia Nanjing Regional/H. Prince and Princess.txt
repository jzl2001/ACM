Given a positive integer nn, you need to find out the minimum integer kk such that for any subset TT of the set \{1,2,\cdots,n\}{1,2,⋯,n} of size kk, there exist two different integers u,v \in Tu,v∈T that uu is a factor of vv.

Input
The first line contains an integer T~(1\le T\le 10^5)T (1≤T≤10 
5
 ) indicating the number of test cases.

Each of the following TT lines contains an integer n~(2\le n\le 10^9)n (2≤n≤10 
9
 ) describing a test case.

Output
For each test case, output a line containing an integer which indicates the answer.

样例输入复制
4
2
3
4
5
样例输出复制
2
3
3
4
题意：给出一个n，需要找出最小的一个k，满足任意1~n里面
任意k个元素存在两个不同的数字互为约数。
规律题，实际上需要一半。
输出(n + 1) / 2 + 1。
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf;  int x = false;  char ch = gc;  bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); };
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }

const int mod = 1e9 + 7;
const int N = 1e6 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;

int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		scanf("%d", &n);
		printf("%d\n", (n + 1) / 2 + 1);
	}
	return 0;
}

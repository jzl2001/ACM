#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <vector>
using namespace std;
typedef long long ll;
int n, q;
const int N = 1e3 + 10;
int a[N];
vector<int>v[20];
int vis[N];
int ans = 0x3f3f3f3f;
bool use[N];
bool is_prime(int k)
{
	int num = sqrt(k);
	for (int i = 2; i <= num; i++)
		if (k % i == 0)
			return false;
	return true;
}
void get_num(int n, int w)
{
	for (int i = 2; i <= n; i++)
		if (n % i == 0 && vis[i])
			v[w].push_back(i);
}
void dfs(int d, int tot)
{
	if (d == n)
	{
		ans = min(ans, tot);
		return;
	}
	else
	{
		for (auto i = 0; i < v[d].size(); i++)
		{
			if (!use[v[d][i]])
			{
				use[v[d][i]] = 1;
				dfs(d + 1, tot + v[d][i]);
				use[v[d][i]] = 0;
			}
		}
	}
}
int main(){
	for (int i = 2; i <= 1000; i++)
		if (is_prime(i))
			vis[i] = 1;
	cin >> n;
	for (int i = 0; i < n; i++)
		scanf("%d", &a[i]), get_num(a[i], i);
	dfs(0, 0);
	if (ans == 0x3f3f3f3f)
		cout << -1 << endl;
	else
		cout << ans << endl;
	return 0;
}
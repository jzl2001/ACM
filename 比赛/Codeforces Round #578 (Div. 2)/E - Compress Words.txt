<hash>
一个串正着哈， 一个倒着哈
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define continue(x) { x; continue; }
#define break(x) { x; break; }
const int N = 1e6 + 10;
ll ans[N];
ll base = 233;
ll mod = 1e9 + 7;
int main(){
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	string last;
	string ans;
	cin >> last;
	for (int i = 1; i <= n - 1;  i++)
	{
		string now;
		cin >> now;
		ll f = 0, s = 0, record = 0, x = 1;
		int len1 = last.size(), len2 = now.size();
		int MI = min(len1, len2);
		for (int j = 0; j < MI; j++)
		{
			f = (f * base % mod + last[len1 - j - 1]) % mod; 
			s = (s + now[j] * x % mod) % mod; 
			x = x * base % mod;
			if (f == s)
				record = j + 1;
		}
		for (int k = record; k < len2; k++)
			last.push_back(now[k]);
	}
	cout << last << endl;
	return TIME;
}
<exkmp>
求一个串的后缀跟另一个串的最长前缀
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
 
#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define continue(x) { x; continue; }
#define break(x) { x; break; }
const int MAXN = 1e6 + 10;
int mod = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
int exnex[MAXN];
int exten[MAXN];
void getexnext(const char p[], int m)
{
	int i = 0, j;
	exnex[0] = m; 
	while (i + 1 < m && p[i] == p[i + 1]) 
		i++;
	exnex[1] = i;
	int k = 1 + i, po = 1; 
	for (i = 2; i < m; i++)
	{
		if (exnex[i - po] < k - i) 
			exnex[i] = exnex[i - po]; 
		else
		{
			j = k - i;
			if (j < 0) 
				j = 0;
			while (i + j < m && p[i + j] == p[j])
				j++;
			exnex[i] = j;
			k = i + j, po = i; 
		}
	}
}
void exkmp(const char s[], const char p[], int n, int m)
{
	getexnext(p, m); 
	int i = 0, j;
	while (s[i] == p[i] && i < m && i < n) 
		i++;
	exten[0] = i;
	int k = i, po = 0;
	for (i = 1; i < n; i++) 
	{
		if (exnex[i - po] < k - i)
			exten[i] = exnex[i - po];
		else
		{
			j = k - i;
			if (j < 0)
				j = 0;
			while (i + j < n && j < m && s[i + j] == p[j])
				j++;
			exten[i] = j; 
			k = i + j, po = i;
		}
	}
}
char a[MAXN];
char b[MAXN];
int ans = 0;
int main(){
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	int n;
	cin >> n;
	scanf("%s", a);
	int len1 = strlen(a);
	n--;
	while (n--)
	{
		scanf("%s", b);
		int len2 = strlen(b);
		int len = min(len1, len2);
		exkmp(a + len1 - len, b, len, len);
		int MX = 0;
		for (int i = 0; i < len; i++)
		{
			if (i + exten[i] == len) // 从该点的长度加i = len 
				MX = max(MX, exten[i]);		
		}
		for (int i = MX; i < len2; i++)
		{
			a[len1++] = b[i];
		}
	}
	cout << a << endl; 
	return TIME;
}
 
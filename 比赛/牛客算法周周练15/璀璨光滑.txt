链接：https://ac.nowcoder.com/acm/contest/6290/C
来源：牛客网

时间限制：C/C++ 6秒，其他语言12秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
终于活成了自己讨厌的样子。
有一张2n的点的图，这个图上每个点标上了0到2n-1之间不同的数字。记pi为第i个点的标号，那么u和v之间连边当且仅当pu与pv的二进制表示恰好有一位不同。
现在告诉了你这张图，但是每个点的标号不见了，请找到一个字典序最小的标号方式，即先比较p1，如果相同的话比较p2，依次类推。
输入描述:
第一行一个整数T(T≤ 1000)，表示数据组数。
接下来一行每行一个正整数n,m(n≤ 18)，表示有2n个点m条边，接下来若干行表示边，没有重边没有自环，保证有解。
保证\sum 2^n \leq 10^6∑2 
n
 ≤10 
6
 。
输出描述:
对于每组数据，输出一行，2n个0到2n-1个不同的数。
示例1
输入
复制
1
2 4
1 3
1 4
3 2
4 2
输出
复制
0 3 1 2
题意：给出n，表示有2的n次方个点，再给出图，两点之间有边要求上面的数字二进制相差最多
一位，问给每个点一个数字最小的字典序。用BFS找到可行的解，因为每个相差一个二进制位的
点都连边了，直接BFS可以求出一种可行的方案，即直接或上当前数字。再将每列排序，
比如样例
0 0
0 1
1 0
1 1
列之间交换不会影响个数关系，这个时候排序使得字典序最小即可。
#include <iostream>
#include <set>
#include <bits/stdc++.h>
//#include <unordered_map>
#include <assert.h>
#include <time.h>
#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <string>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 3e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }

int n;
struct node
{
	bool num[N];
	bool operator < (const node &oth)const
	{
		for (int i = 1; i <= (1 << n); i++)
		{
			if (num[i] != oth.num[i])
				return num[i] > oth.num[i];
		}
		return false;
	}
}p[21];
vector<int>G[N];
int vis[N];
int a[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int m;
		cin >> n >> m;
		for (int i = 1; i <= m; i++)
		{
			int u, v;
			scanf("%d%d", &u, &v);
			G[u].push_back(v);
			G[v].push_back(u);
		}
		queue<int>q;
		for (int i = 0; i < G[1].size(); i++)
		{
			int to = G[1][i];
			a[to] = (1 << i);
			q.push(to);
		}
		vis[1] = 1;
		while (!q.empty())
		{
			int f = q.front();
			q.pop();
			if (vis[f])
				continue;
			vis[f] = 1;
			for (auto &i : G[f])
			{
				if (!vis[i])
					a[i] |= a[f], q.push(i);
			}
		}
		for (int i = 1; i <= (1 << n); i++)
		{
			for (int j = 0; j < n; j++)
			{
				p[j].num[i] = (a[i] >> j) & 1;
			}
		}
		sort(p, p + n);
		for (int i = 1; i <= (1 << n); i++)
		{
			int now = 0;
			for (int j = 0; j < n; j++)
			{
				if (p[j].num[i])
					now |= (1 << j);
			}
			printf("%d ", now);
		}
		for (int i = 1; i <= (1 << n); i++)
			G[i].clear(), a[i] = vis[i] = 0;
		cout << endl;
	}
	return TIME;
}
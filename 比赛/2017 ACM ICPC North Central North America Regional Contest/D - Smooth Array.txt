/*
分组背包
*/
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 998244353;
const int N = 5000 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
int a[N][N];
int d[N];
int g[N];
map<int, int>mp[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n, k, s;
	cin >> n >> k >> s;
	int cnt = 0;
	int x = 0, y = 0;
	memset(a, -1, sizeof a);
	for (int i = 1; i <= n; i++)
	{
		int num;
		cin >> num;
		cnt++, y++;
		if (cnt % k == 1 || k == 1)
			x++, y = 1;
		a[x][y] = num;
	}
	memset(d, -0x3f, sizeof d);
	d[0] = 0;
	for (int i = 1; i <= k; i++) // k组
	{
		for (int u = 1; u <= x; u++)
		{
			if (~a[u][i])
				mp[i][a[u][i]]++;
		}
		memset(g, 0, sizeof g);
		for (int j = 0; j <= s; j++) 
		{
			if (j)
				g[j] = max(g[j - 1], d[j]);
		}
		for (int j = s; j >= 0; j--) //容量
		{
			for (auto &w : mp[i])
			{
				if (j >= w.first && d[j - w.first] != -0x3f3f3f3f)
					d[j] = max(d[j], d[j - w.first] + w.second);
			}
			d[j] = max(d[j], g[j]);
		}
	}
	cout << n - d[s] << endl;
	return TIME;
}
/*
每组选的有可能选的数字没在物品里。
例如第一组选了一个数字3 d[3] = 1
但是d[4] = INF
第二次d[4]可以等于1
所以取前缀最大值
*/
/*
状压dp n个点，每个点至少遍历一次最小代价
d[i][j]
i二进制表示走了哪些点
j表示到的是哪个点
i到j通过k点转移
*/
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 998244353;
const int N = 5e6 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
map<string, int>mp;
struct node
{
	int x, y;
	string name;
}a[30];
int idx;
int vis[110];
int d[N][23];
int dis(int i, int j)
{
	return abs(a[i].x - a[j].x) + abs(a[i].y - a[j].y);
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n;
	cin >> n;
	a[0].x = 0, a[0].y = 0;
	a[0].name = "star";
	mp[a[0].name] == ++idx;
	for (int i = 1; i <= n; i++)
	{
		cin >> a[i].x >> a[i].y >> a[i].name;
		if (mp[a[i].name] == 0)
			mp[a[i].name] = ++idx;
	}
	memset(d, 0x3f, sizeof d);
	d[1][0] = 0;
	n++;
	for (int i = 1; i <= (1 << n) - 1; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if ((i >> j) & 1)
			{
 				for (int k = 0; k < n; k++)
				{
					if ((i >> k) & 1)
					{
						d[i][j] = min(d[i][j], d[i ^ (1 << j)][k] + dis(k, j));
					}
				}
			}
		}
	}
	int ans = 0x3f3f3f33f;
	for (int i = 1; i <= (1 << n) - 1; i++)
	{
		int cnt = 0;
		memset(vis, 0, sizeof vis);
		for (int j = 0; j < n; j++)
		{
			if (((i >> j) & 1) == 0)
				continue;
			if (!vis[mp[a[j].name]])
				cnt++, vis[mp[a[j].name]] = 1;
		}
		if (cnt == idx)
		{
			for (int j = 0; j < n; j++)
			{
				ans = min(ans, d[i][j] + dis(j, n));
			}
		}
	}
	cout << ans << endl;
	return TIME;
}
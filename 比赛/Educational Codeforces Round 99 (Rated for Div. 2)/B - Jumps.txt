B. Jumps
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are standing on the OX-axis at point 0 and you want to move to an integer point x>0.

You can make several jumps. Suppose you're currently at point y (y may be negative) and jump for the k-th time. You can:

either jump to the point y+k
or jump to the point y−1.
What is the minimum number of jumps you need to reach the point x?

Input
The first line contains a single integer t (1≤t≤1000) — the number of test cases.

The first and only line of each test case contains the single integer x (1≤x≤106) — the destination point.

Output
For each test case, print the single integer — the minimum number of jumps to reach x. It can be proved that we can reach any integer point x.

Example
inputCopy
5
1
2
3
4
5
outputCopy
1
3
2
3
4
Note
In the first test case x=1, so you need only one jump: the 1-st jump from 0 to 0+1=1.

In the second test case x=2. You need at least three jumps:

the 1-st jump from 0 to 0+1=1;
the 2-nd jump from 1 to 1+2=3;
the 3-rd jump from 3 to 3−1=2;
Two jumps are not enough because these are the only possible variants:

the 1-st jump as −1 and the 2-nd one as −1 — you'll reach 0−1−1=−2;
the 1-st jump as −1 and the 2-nd one as +2 — you'll reach 0−1+2=1;
the 1-st jump as +1 and the 2-nd one as −1 — you'll reach 0+1−1=0;
the 1-st jump as +1 and the 2-nd one as +2 — you'll reach 0+1+2=3;
In the third test case, you need two jumps: the 1-st one as +1 and the 2-nd one as +2, so 0+1+2=3.

In the fourth test case, you need three jumps: the 1-st one as −1, the 2-nd one as +2 and the 3-rd one as +3, so 0−1+2+3=4.

题意：第i次操作可以选择前进i步或者后退一步，起点为0可以走到负询问到达x的最小步数。
直接加到≥x，然后差的步数，都可以在差值-1的位置换成-1的操作，如果差为1，就输出步数+1，
否则输出步数。
#include <stdio.h>
#include <string.h>
#include <algorithm>
typedef long long ll;

#define N 1000000 + 10

char s[N];

int sum[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int ed = 0;
	for (int i = 1; i < N; i++)
	{
		sum[i] += sum[i - 1] + i;
		if (sum[i] >= 1e6)
		{
			ed = i;
			break;
		}
	}
	int t;
	scanf("%d", &t);
	while (t--)
	{
		int x;
		scanf("%d", &x);
		int ans = std::lower_bound(sum + 1, sum + ed + 1, x) - sum;
		if (sum[ans] == x + 1)
			++ans;
		printf("%d\n", ans);
	}
	return 0;
}
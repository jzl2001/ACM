D. Sequence and Swaps
time limit per test1.5 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given a sequence a consisting of n integers a1,a2,…,an, and an integer x. Your task is to make the sequence a sorted (it is considered sorted if the condition a1≤a2≤a3≤⋯≤an holds).

To make the sequence sorted, you may perform the following operation any number of times you want (possibly zero): choose an integer i such that 1≤i≤n and ai>x, and swap the values of ai and x.

For example, if a=[0,2,3,5,4], x=1, the following sequence of operations is possible:

choose i=2 (it is possible since a2>x), then a=[0,1,3,5,4], x=2;
choose i=3 (it is possible since a3>x), then a=[0,1,2,5,4], x=3;
choose i=4 (it is possible since a4>x), then a=[0,1,2,3,4], x=5.
Calculate the minimum number of operations you have to perform so that a becomes sorted, or report that it is impossible.

Input
The first line contains one integer t (1≤t≤500) — the number of test cases.

Each test case consists of two lines. The first line contains two integers n and x (1≤n≤500, 0≤x≤500) — the number of elements in the sequence and the initial value of x.

The second line contains n integers a1, a2, ..., an (0≤ai≤500).

The sum of values of n over all test cases in the input does not exceed 500.

Output
For each test case, print one integer — the minimum number of operations you have to perform to make a sorted, or −1, if it is impossible.

Example
inputCopy
6
4 1
2 3 5 4
5 6
1 1 3 4 4
1 10
2
2 10
11 9
2 10
12 11
5 18
81 324 218 413 324
outputCopy
3
0
0
-1
1
3

题意：给出一个x和一个序列，每次可以交换x跟序列，询问最少次数能变成不讲序。
思路：枚举起始位置，然后变换，变的途中判断是不是已经有序了防止再交换增加次数。

#include <stdio.h>
#include <string.h>
#include <algorithm>
typedef long long ll;

#define N 500 + 10

int a[N];
int b[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	while (t--)
	{
		int n, x;
		scanf("%d%d", &n, &x);
		for (int i = 1; i <= n; i++)
			scanf("%d", &a[i]);
		if (std::is_sorted(a + 1, a + n + 1))
		{
			puts("0");
			continue;
		}
		int tmp = x, ans = 0x3f3f3f3f;
		for (int i = 1; i <= n; i++)
		{
			int cnt = 0, x = tmp;
			memcpy(b, a, sizeof 4 * (n + 1));
			for (int j = i; j <= n && !(std::is_sorted(b + 1, b + n + 1)); j++)
				if (b[j] > x)
					std::swap(b[j], x), ++cnt;
			if (std::is_sorted(b + 1, b + n + 1))
				ans = std::min(ans, cnt);
		}
		printf("%d\n", ans == 0x3f3f3f3f ? -1 : ans);
	}
	return 0;
}
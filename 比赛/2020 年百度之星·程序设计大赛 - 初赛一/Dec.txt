 Time Limit: 2000/1000 MS (Java/Others)  Memory Limit: 32768/32768 K (Java/Others)
Problem Description
初始有 a, ba,b 两个正整数，每次可以从中选一个大于 1 的数减 1，最后两个都会减到 1，我们想知道在过程中两个数互质的次数最多是多少。

Input
第一行一个正整数 test(1 \le test \le 1000000)test(1≤test≤1000000) 表示数据组数。

接下来 test 行，每行两个正整数 a, b(1 \le a, b \le 1000)a,b(1≤a,b≤1000)。

Output
对于每组数据，一行一个整数表示答案。

Sample Input
1
2 3
Sample Output
4

样例解释
2 3 -> 1 3 -> 1 2 -> 1 1
Statistic | Submit | Clarifications | Back
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <string>
#include <bits/stdc++.h>
using namespace std;
#ifdef LOCAL
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
const int N = 1e5 + 10;

int gcd(int a, int b)
{
    return b == 0 ? a : gcd(b, a % b);
}
int d[1010][1010];
int dfs(int x, int y)
{
    if (x == 1 && y == 1)
        return d[x][y] = 1;
    if (d[x][y] != -1)
        return d[x][y];
    int ans = 0;
    if (x > 1)
        dfs(x - 1, y), ans = max(ans, d[x - 1][y]);
    if (y > 1)
        dfs(x, y - 1), ans = max(ans, d[x][y - 1]);
    return d[x][y] = (ans + (gcd(x, y) == 1));
}
int ans[N];
//double ans[410] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.7, 1.7, 1.7, 2.0, 2.0, 2.3, 2.3, 2.3, 2.7, 2.7, 2.7, 2.7, 2.7, 3.0, 3.0, 3.0, 3.0, 3.0, 3.3, 3.3, 3.3, 3.3, 3.3, 3.7, 3.7, 3.7, 3.7, 3.7, 4.0, 4.0, 4.0, 4.0, 4.0, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.4, 4.4, 4.6, 4.7, 4.7, 5.0, 5.0, 5.0, 5.4, 5.4, 5.4, 5.4, 5.4, 5.7, 5.7, 5.7, 5.7, 5.7, 6.0, 6.0, 6.0, 6.0, 6.0, 6.4, 6.4, 6.4, 6.4, 6.4, 6.7, 6.7, 6.7, 6.7, 6.7, 7.0, 7.0, 7.0, 7.0, 7.0, 7.4, 7.4, 7.4, 7.4, 7.4, 7.7, 7.7, 7.7, 7.7, 7.7, 8.0, 8.0, 8.0, 8.0, 8.0, 8.3, 8.3, 8.3, 8.3, 8.3, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.7, 8.7, 8.7, 8.7, 8.7, 9.1, 9.1, 9.1, 9.1, 9.1, 9.4, 9.4, 9.4, 9.4, 9.4, 9.7, 9.7, 9.7, 9.7, 9.7, 10.1, 10.1, 10.1, 10.1, 10.1, 10.4, 10.4, 10.4, 10.4, 10.4, 10.7, 10.7, 10.7, 10.7, 10.7, 11.1, 11.1, 11.1, 11.1, 11.1, 11.4, 11.4, 11.4, 11.4, 11.4, 11.7, 11.7, 11.7, 11.7, 11.7, 12.0, 12.0, 12.0, 12.0, 12.0, 12.3, 12.3, 12.3, 12.3, 12.3, 12.6, 12.6, 12.6, 12.6, 12.6, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 13.1, 13.1, 13.1, 13.1, 13.1, 13.4, 13.4, 13.4, 13.4, 13.4, 13.8, 13.8, 13.8, 13.8, 13.8, 14.1, 14.1, 14.1, 14.1, 14.1, 14.4, 14.4, 14.4, 14.4, 14.4, 14.8, 14.8, 14.8, 14.8, 14.8, 15.1, 15.1, 15.1, 15.1, 15.1, 15.4, 15.4, 15.4, 15.4, 15.4, 15.7, 15.7, 15.7, 15.7, 15.7, 16.0, 16.0, 16.0, 16.0, 16.0, 16.3, 16.3, 16.3, 16.3, 16.3, 16.6, 16.6, 16.6, 16.6, 16.6, 16.9, 16.9, 16.9, 16.9, 16.9, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2 };
//double ans[410] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.7, 1.7, 1.7, 2.0, 2.0, 2.3, 2.3, 2.3, 2.7, 2.7, 2.7, 2.7, 2.7, 3.0, 3.0, 3.0, 3.0, 3.0, 3.3, 3.3, 3.3, 3.3, 3.3, 3.7, 3.7, 3.7, 3.7, 3.7, 4.0, 4.0, 4.0, 4.0, 4.0, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.3, 4.4, 4.4, 4.6, 4.7, 4.7, 5.0, 5.0, 5.0, 5.4, 5.4, 5.4, 5.4, 5.4, 5.7, 5.7, 5.7, 5.7, 5.7, 6.0, 6.0, 6.0, 6.0, 6.0, 6.4, 6.4, 6.4, 6.4, 6.4, 6.7, 6.7, 6.7, 6.7, 6.7, 7.0, 7.0, 7.0, 7.0, 7.0, 7.4, 7.4, 7.4, 7.4, 7.4, 7.7, 7.7, 7.7, 7.7, 7.7, 8.0, 8.0, 8.0, 8.0, 8.0, 8.3, 8.3, 8.3, 8.3, 8.3, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.6, 8.7, 8.7, 8.7, 8.7, 8.7, 9.1, 9.1, 9.1, 9.1, 9.1, 9.4, 9.4, 9.4, 9.4, 9.4, 9.7, 9.7, 9.7, 9.7, 9.7, 10.1, 10.1, 10.1, 10.1, 10.1, 10.4, 10.4, 10.4, 10.4, 10.4, 10.7, 10.7, 10.7, 10.7, 10.7, 11.1, 11.1, 11.1, 11.1, 11.1, 11.4, 11.4, 11.4, 11.4, 11.4, 11.7, 11.7, 11.7, 11.7, 11.7, 12.0, 12.0, 12.0, 12.0, 12.0, 12.3, 12.3, 12.3, 12.3, 12.3, 12.6, 12.6, 12.6, 12.6, 12.6, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 12.9, 13.1, 13.1, 13.1, 13.1, 13.1, 13.4, 13.4, 13.4, 13.4, 13.4, 13.8, 13.8, 13.8, 13.8, 13.8, 14.1, 14.1, 14.1, 14.1, 14.1, 14.4, 14.4, 14.4, 14.4, 14.4, 14.8, 14.8, 14.8, 14.8, 14.8, 15.1, 15.1, 15.1, 15.1, 15.1, 15.4, 15.4, 15.4, 15.4, 15.4, 15.7, 15.7, 15.7, 15.7, 15.7, 16.0, 16.0, 16.0, 16.0, 16.0, 16.3, 16.3, 16.3, 16.3, 16.3, 16.6, 16.6, 16.6, 16.6, 16.6, 16.9, 16.9, 16.9, 16.9, 16.9, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2, 17.2 };
int main()
{
#ifdef LOCAL
    freopen("E:\input.txt", "r", stdin);
#endif
    memset(d, -1, sizeof d);
    for (int i = 1; i <= 1000; i++)
    {
        for (int j = 1; j <= 1000; j++)
        {
            dfs(i, j);
        }
    }
    int t;
    cin >> t;
    while (t--)
    {
        int a, b;
        scanf("%d%d", &a, &b);
        printf("%d\n", d[a][b]);
    }
    return TIME;
}

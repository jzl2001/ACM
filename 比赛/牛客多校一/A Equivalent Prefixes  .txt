Two arrays u and v each with m distinct elements are called equivalent if and only if  for all 
where  denotes the index of the minimum element among .
Since the array contains distinct elements, the definition of minimum is unambiguous.

Bobo has two arrays a and b each with n distinct elements. Find the maximum number  where  and  are equivalent.



找到每个位置， 距离他最近的最小值， 若不相等则不行。 例如
3 1 5 2 4
3 2 4 5 1
距离2的最近的最小值位置为2， 距离5的最小值的位置为3， 则在区间[3, 4]内不满足条件。
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
#define sz(a) ((int)(a).size())
typedef long long ll;
bool cmp(int a, int b) { return a > b; }
#define me(a, b) (memset(a, b, sizeof a))
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;
const double PI = acos(-1);
const int N = 1e6 + 10;
template<typename S, typename T> inline bool Min(S &a, const T &b){ return a > b ? a = b, true : false; }
template<typename S, typename T> inline bool Max(S &a, const T &b){ return a < b ? a = b, true : false; }
template<typename S, typename T> inline void Adm(S &a, const T &b){ a = a + b;  }
template<typename S, typename T> inline void Mum(S &a, const T &b){ a = 1LL * a * b % mod; }
template<typename T> inline T gcd(T a, T b){ while (b){ T t = b; b = a % b; a = t; }return a; }
template<typename T> inline int bcnt(T x){ int cnt = 0; while (x)++cnt, x &= x - 1; return cnt; }
inline ll fpow(ll a, ll b, ll mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
#define bo bool operator < (const node &oth)const
#define AC return 0;

int a[N];
int b[N];
int c[N];
int main(){
	int n;
	while (cin >> n)
	{
		stack<int>s1, s2;
		for (int i = 1; i <= n; i++)
			scanf("%d", &a[i]), b[i] = 0, c[i] = 0;
		for (int i = n; i >= 1; i--)
		{
			while (!s1.empty() && a[s1.top()] > a[i])
				b[s1.top()] = i, s1.pop();
			s1.push(i);
		}
		while (!s1.empty())
			b[s1.top()] = 0, s1.pop();
		for (int i = 1; i <= n; i++)
			scanf("%d", &a[i]);
		for (int i = n; i >= 1; i--)
		{
			while (!s2.empty() && a[s2.top()] > a[i])
				c[s2.top()] = i, s2.pop();
			s2.push(i);
		}
		while (!s2.empty())
			c[s2.top()] = 0, s2.pop();
		for (int i = 1; i <= n; i++)
		{
			if (b[i] != c[i])
			{
				cout << i - 1 << endl;
				goto brk;
			}
		}
		cout << n << endl;
	brk:;
	}
	AC
}
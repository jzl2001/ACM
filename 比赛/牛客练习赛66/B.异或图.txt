链接：https://ac.nowcoder.com/acm/contest/6112/B
来源：牛客网

时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
牛妹是一个喜欢无向图的女孩子。

牛妹现在有 nn 个点构成的点集 VV，每个点有点权 a_ia 
i
​	
 。

牛妹想用这 nn 个点构造 qq 个无向图 G_i=(V,E_i)G 
i
​	
 =(V,E 
i
​	
 )。对于第 ii 个无向图，牛妹指定了一个参数 k_ik 
i
​	
 。牛妹规定 (u,v)\in E_i(u,v)∈E 
i
​	
  当且仅当 a_u \oplus a_v=k_ia 
u
​	
 ⊕a 
v
​	
 =k 
i
​	
 ，其中 \oplus⊕ 表示二进制按位异或运算。

牛妹并不想知道这 qq 个无向图具体长什么样，所以对于第 ii 个无向图，你只需要告诉牛妹 x_ix 
i
​	
  到 y_iy 
i
​	
  的最短路径长度。

输入描述:
第一行两个整数 n, q\ (2 \le n \le 10^6, 1 \le q \le 10^6)n,q (2≤n≤10 
6
 ,1≤q≤10 
6
 )，表示点集大小和无向图数量。
第二行 n 个整数 a_1, a_2, \ldots , a_n\ (0 \le a_i < 2^{20})a 
1
​	
 ,a 
2
​	
 ,…,a 
n
​	
  (0≤a 
i
​	
 <2 
20
 )，a_ia 
i
​	
  表示第 i 个点的点权。
接下来 q 行，第 i 行三个整数 k_i, x_i, y_i\ (1 \le k_i < 2^{20}, 1\le x_i, y_i\le n, x_i \ne y_i)k 
i
​	
 ,x 
i
​	
 ,y 
i
​	
  (1≤k 
i
​	
 <2 
20
 ,1≤x 
i
​	
 ,y 
i
​	
 ≤n,x 
i
​	
  

​	
 =y 
i
​	
 )，k_ik 
i
​	
  表示第 i 个无向图的参数，x_i, y_ix 
i
​	
 ,y 
i
​	
  表示询问最短路的起点和终点。
输出描述:
输出 q 行，第 i 行一个整数，表示第 i 个无向图中 x_ix 
i
​	
  到 y_iy 
i
​	
  的最短路长度。若 x_ix 
i
​	
  和 y_iy 
i
​	
  不连通则输出 -1。
示例1
输入
复制
5 5
2 4 4 1 1
6 1 3
6 2 3
6 1 4
5 4 5
2 4 5
输出
复制
1
2
-1
2
-1

#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
#ifdef LOCAL
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
typedef long long ll;
const int N = 2e6 + 10;
const int mod = 998244353;
 
int vis[N];
int a[N];
int main()
{
#ifdef LOCAL
    freopen("E:/input.txt", "r", stdin);
#endif
    int n, q;
    cin >> n >> q;
    for (int i = 1; i <= n; i++)
    {
        a[i] = read();
        vis[a[i]] = 1;
    }
    while (q--)
    {
        int k, x, y;
        k = read();
        x = read();
        y = read();
        int nxt = a[x] ^ k;
        if (nxt == a[y])
        {
            puts("1");
        }
        else
        {
            if (a[x] == a[y] && vis[nxt])
                puts("2");
            else
                puts("-1");
        }
    }
    return TIME;
}
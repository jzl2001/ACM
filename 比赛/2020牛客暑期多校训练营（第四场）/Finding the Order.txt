https://ac.nowcoder.com/acm/contest/7882/F
链接：https://ac.nowcoder.com/acm/contest/7882/F
来源：牛客网

时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
ZYB has a so-called smart brain: He can always point out the keypoint in a complex problem.

There are two parallel lines AB and CD in a plane. {A,B,C,D}A,B,C,D are all distinct points. 
You only know the Euclidean Distances between {AC,AD,BC,BD}AC,AD,BC,BD. but you don't know the exact order of points. (i.e. You don't know whether it's AB \parallel CDAB∥CD or AB \parallel DCAB∥DC).

Could you determine the order of points quickly, like the ZYB does?
输入描述:
The input contains multiple cases. The first line of the input contains a single integer T\ (1 \le T \le 100)T (1≤T≤100), the number of cases.
For each case, there are four integers a,b,c,d(1 \le a,b,c,d \le 1000)a,b,c,d(1≤a,b,c,d≤1000) in a line, indicating the distances between {AC,AD,BC,BD}AC,AD,BC,BD.
It is guaranteed that each case corresponds to a valid solution.
输出描述:
For each case, output 'AB//CD' (Quotation marks) if AB \parallel CDAB∥CD, or output 'AB//DC' (Quotation marks) if AB \parallel DCAB∥DC.
示例1
输入
复制
2
3 5 5 3
5 3 3 5
输出
复制
AB//CD
AB//DC
题意：给出4边，问AB//CD还是AB//DC
找规律，如果AD,BC某个是最长边则是AB//CD，否则AB//DC。
#include <iostream>
#include <set>
//#include <bits/stdc++.h>
//#include <unordered_map>
#include <assert.h>
#include <time.h>
#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <string>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 5e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }

int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int a, b, c, d;
		scanf("%d%d%d%d", &a, &b, &c, &d);
		int mx = max({ a, b, c, d });
		if (mx == b || mx == c)
			puts("AB//CD");
		else
			puts("AB//DC");
	}
	return TIME;
}

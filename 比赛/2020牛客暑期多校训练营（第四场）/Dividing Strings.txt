链接：https://ac.nowcoder.com/acm/contest/7882/D
来源：牛客网

Dividing Strings
时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
With powerful decision-making skills, ZYB can solve complex problems

ZYB has a decimal string {s}s of length {n}n. He wants to split the string into several (at least 2) non-empty continuous substrings and minimize the difference between the maximum value and the minimum value of the gifts. The value of a continuous substring is the value of it when it's considered as a decimal number. 
For instance, when the string '1230' is split into '12' and '30', the values of the two parts are 12 and 30 separately. Notice that the substrings are not allowed to contain leading zero(s). For example, the only feasible way of splitting '001' is '0', '0' and '1'. 

Can you help ZYB find the fairest splitting?
输入描述:
There are multiple test cases. The first line of input contains an integer {T}T, indicating the number of test cases. For each test case:
The first line contains an integer {n}n(2 \le n \le 10^52≤n≤10 
5
 ), indicating the length of the decimal string.
The second line contains a decimal string {s}s of length {n}n.(\text{'0'} \le s[i] \le \text{'9'}’0’≤s[i]≤’9’ for each 1 \le i \le n1≤i≤n).
It is guaranteed that the sum of {n}n in all test cases does not exceed 10^610 
6
 .
输出描述:
For each test case, output one line containing the minimum difference between the maximum value and the minimum value.
示例1
输入
复制
4
2
08
5
10199
7
9710296
8
12341234
输出
复制
8
2
6
0
题意：给出一个数字串，分成至少两部分使得最大值和最小值的差值最小。
答案最多是9，因为可以都分成个位，所以最大值跟最小值位数差值最多是1。
所以枚举等长，跟差一个的情况，也就是1000..x跟999.x等。个位跟两位的
差一个情况需要单独判读。
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 10
const int mod = 998244353;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); };
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
const int N = 1e5 + 10;

char s[N];
int pre[N];
int suf[N];
ll ha1[N];
ll base[N];

ll calc(int l, int r)
{
	return (ha1[r] - ha1[l - 1] * base[r - l + 1] % mod + mod) % mod;
}
int mius(int l1, int r1, int l2, int r2)
{
	ll num1 = calc(l1, r1);
	ll num2;
	if (l2 == 0)
		num2 = 0;
	else
		num2 = calc(l2, r2);
	return abs((num1 - num2 + mod) % mod);
}
int len9[N], len0[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	base[0] = 1;
	for (int i = 1; i < N; i++)
	{
		base[i] = base[i - 1] * hash_ % mod;
	}
	int t;
	cin >> t;
	while (t--)
	{
		int ans = 9;
		int n;
		scanf("%d", &n);
		scanf("%s", s + 1);
		for (int i = 1; i <= n; i++)
		{
			ha1[i] = (ha1[i - 1] * hash_ % mod + s[i] - '0') % mod;
			len9[i] = (s[i] == '9') + len9[i - 1];
			len0[i] = (s[i] == '0') + len0[i - 1];
		}
		for (int j = 1; j < n; j++)
		{
			int cnt = 0;
			pair<int, int>p1, p2;
			if (n % j == 0)
			{
				string mx = "0", mi = "a";
				for (int i = 1; i <= n; i += j)
				{
					if (j != 1 && s[i] == '0')
						continue;
					cnt++;
					string x;
					for (int k = 1; k <= j; k++)
						x.push_back(s[k + i - 1]);
					if (x > mx)
						mx = x, p1 = { i, i + j - 1 };
					if (x < mi)
						mi = x, p2 = { i, i + j - 1 };
				}
				if (cnt != n / j)
					mi = "0", p1 = { 0, 0 };
				if (cnt > 1)
				{
					ans = min(ans, mius(p1.first, p1.second, p2.first, p2.second));
				}
			}
		}
		if (ans == 0)
		{
			printf("%d\n", ans);
			continue;
		}
		int flag = 0;
		string mx = "0", mi = "a";
		for (int j = 2; j < n; j++)
		{
			int flag = 0;
			int cnt = 0;
			pair<int, int>p1, p2;
			int mx = -1, mi = INF;
			for (int i = 1; i <= n && !flag; i += j)
			{
				if (s[i] == '9')
				{
					if (len9[i + j - 2] - len9[i - 1] == j - 1)
					{
						if (s[i + j - 1] <= '1')
						{
							flag = 1;
							break;
						}
						if (s[i + j - 1] - '0' < mi)
							mi = s[i + j - 1] - '0', p2 = { i, i + j - 1 };
						cnt++;
					}
					else
					{
						flag = 1;
						break;
					}
				}
				else
					if (s[i] == '1')
					{
						if (len0[i + j - 1] - len0[i] == j - 1 && i + j <= n)
						{
							if (s[i + j - 1] >= '8')
							{
								flag = 1;
								break;
							}
							if (s[i + j] - '0' > mx)
								mx = s[i + j] - '0', p1 = { i, i + j };
							i++;
							cnt++;
						}
						else
						{
							flag = 1;
							break;
						}
					}
					else
					{
						flag = 1;
						break;
					}
			}
			if (!flag && cnt >= 2)
				ans = min(ans, mius(p1.first, p1.second, p2.first, p2.second));
		}
		pre[0] = 'a';
		for (int i = 1; i <= n; i++)
		{
			pre[i] = min(pre[i - 1], (int)s[i]);
		}
		suf[n + 1] = 'a';
		for (int i = n; i >= 1; i--)
		{
			suf[i] = min(suf[i + 1], (int)s[i]);
		}
		for (int i = 1; i < n; i++)
		{
			if (s[i] == '0')
				continue;
			int num = (s[i] - '0') * 10 + s[i + 1] - '0';
			if (i != 1 && i + 2 <= n)
				ans = min(ans, num - min(pre[i - 1], suf[i + 2]) + '0');
			else
				if (i != 1)
					ans = min(ans, num - pre[i - 1] + '0');
				else
					if (i + 2 <= n)
						ans = min(ans, num - suf[i + 2] + '0');
		}
		int cnt = 0;
		for (int i = 1; i <= 9; i++)
		{
			mx = "0", mi = "a";
			cnt = 0;
			for (int j = 1; j + 1 <= n; j++)
			{
				string tmp;
				if (s[j] != '0' && s[j] - '0' < i && s[j + 1] - '0' < i)
				{
					cnt += 2;
					tmp.push_back(s[j]);
					tmp.push_back(s[j + 1]);
					if (j + 1 == n - 1 && s[n] >= i + '0')
						cnt++;
					j++;
					mx = max(mx, tmp);
				}
				else
				{
					if (s[j] >= i + '0')
						cnt++;
					if (j == n - 1 && s[n] >= i + '0')
						cnt++;
				}
			}
			if (cnt == n && mx != "0")
				ans = min(ans, (mx[0] - '0') * 10 + mx[1] - '0' - i);
		}
		printf("%d\n", ans);
	}

	return TIME;
}

<唯一分解定理>
#include <bits/stdc++.h>
using namespace std;
#define sz(a) ((int)(a).size())
typedef long long ll;
#define me(a, b) (memset(a, b, sizeof a))
const ll INF = 0x3f3f3f3f3f3f3f3f;
const int MAXN = 1e5 + 10;

ll a[MAXN];
int pre[110];
int p[20] = { 0, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51 };
int is_prime(int k)
{
	int x = sqrt(x);
	for (int i = 2; i <= x; i++)
	{
		if (k % i == 0)
			return 0;
	}
	return 1;
}
struct node
{
	ll x, y;
};
vector<node>u;
int main(){
	ll n;
	ll ans = INF;
	cin >> n;
	ll m1, m2;
	cin >> m1 >> m2;
	for (int i = 1; i <= n; i++)
		scanf("%lld", &a[i]);
	if(m1 == 1)
		cout << "0" << endl, exit(0);
	for (int i = 2; i <= m1; i++)
	{
		int cnt = 0;
		while (m1 % i == 0)
			cnt++, m1 /= i;
		if (cnt)
			u.push_back({ i, cnt * m2 });
	}
	for (int i = 1; i <= n; i++)
	{
		ll tot = 0;
		for (auto &it:u)
		{
			if (a[i] % it.x != 0)
				goto brk;
			else
				{
					int cnt = 0;
					while (a[i] % it.x == 0)
					{
						cnt++;
						a[i] /= it.x;
					}
					ll MX = it.y / cnt + bool(it.y % cnt);
					tot = max(tot, MX);
				}
		}
		if(tot)
			ans = min(tot, ans);
		brk:;
	}
	if(ans == INF)
		cout << -1 << endl;
	else
		cout << ans << endl;
	return 0;
}
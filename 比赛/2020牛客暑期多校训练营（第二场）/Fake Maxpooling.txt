/*
链接：https://ac.nowcoder.com/acm/contest/7669/F
来源：牛客网

Fake Maxpooling
时间限制：C/C++ 3秒，其他语言6秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
Given a matrix of size n\times mn×m and an integer {k}k, where A_{i,j} = lcm(i, j)A 
i,j
​	
 =lcm(i,j), the least common multiple of {i}i and {j}j. You should determine the sum of the maximums among all k\times kk×k submatrices.
输入描述:
Only one line containing three integers n,m,k~(1\leq n,m \leq 5000, 1 \leq k \leq \min\{n, m\})n,m,k (1≤n,m≤5000,1≤k≤min{n,m}).
输出描述:
Only one line containing one integer, denoting the answer.
示例1
输入
复制
3 4 2
输出
复制
38
说明
The given matrix is:
1 2 3 4
2 2 6 4
3 6 3 12
The maximums among all 2\times 22×2 submatrices are {2, 6, 6, 6, 6, 12}2,6,6,6,6,12 respectively, and their sum is {38}38.
*/
/*
题意：一个矩阵a[i][j] = lcm(i, j)。
求所有k正方形的最大值之和。
二维ST表，因为内存限制，所以用滚动更新，最后求的只能用于长度为k的正方形。
*/
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 998244353;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
const int N = 5e3 + 10;
int lg2[N], tb[2][N][N];
int gcd(int a, int b)
{
	return b == 0 ? a : gcd(b, a % b);
}
void ST(int n, int m, int k)
{
	lg2[0] = -1;
	int mi = min(n, m);
	for (int i = 1; i <= k; i++)
		lg2[i] = lg2[i >> 1] + 1;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			tb[0][i][j] = i * j / gcd(i, j);
	for (int kk = 1; kk <= lg2[k]; kk++)
	{
		int k = kk & 1;
		for (int i = 1; i + (1 << kk) - 1 <= n; i++)
			for (int j = 1; j + (1 << kk) - 1 <= m; j++)
				tb[k][i][j] = max({ tb[!k][i][j], tb[!k][i][j + (1 << kk - 1)],
				tb[!k][i + (1 << kk - 1)][j], tb[!k][i + (1 << kk - 1)][j + (1 << kk - 1)] });		
	} 
} 
int Ask(int x1, int y1, int k)
{
	int x2 = x1 + k - (1 << lg2[k]), y2 = y1 + k - (1 << lg2[k]);
	k = lg2[k] & 1;
	return max({ tb[k][x1][y1], tb[k][x1][y2], tb[k][x2][y1], tb[k][x2][y2] });
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n, m, k;
	cin >> n >> m >> k;
	ST(n, m, k);
	ll res = 0;
	for (int i = 1; i + k - 1 <= n; i++)
		for (int j = 1; j + k - 1 <= m; j++)
			res += Ask(i, j, k);
	cout << res << endl;
	return TIME;
}

链接：https://ac.nowcoder.com/acm/contest/7669/C
来源：牛客网

时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 262144K，其他语言524288K
Special Judge, 64bit IO Format: %lld
题目描述 
Given an unrooted tree, you should choose the minimum number of chains that all edges in the tree are covered by at least one chain. Print the minimum number and one solution. If there are multiple solutions, print any of them.
输入描述:
The first line contains one integer n~(1\leq n \leq 2\times10^5)n (1≤n≤2×10 
5
 ), denoting the size of the tree.
Following {n-1}n−1 lines each contains two integers u,v~(1\leq u < v \leq n)u,v (1≤u<v≤n), denoting an edge in the tree.
It's guaranteed that the given graph forms a tree.
输出描述:
The first line contains one integer {k}k, denoting the minimum number of chains to cover all edges.
Following {k}k lines each contains two integers u,v~(1\leq u,v \leq n)u,v (1≤u,v≤n), denoting a chain you have chosen. Here {u = v}u=v is permitted, which covers no edge.
示例1
输入
复制
5
1 2
1 3
2 4
2 5
输出
复制
2
2 3
4 5
说明
构造，dfs序
#include <iostream>
#include <set>
#include <bits/stdc++.h>
//#include <unordered_map>
#include <assert.h>
#include <time.h>
#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <string>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 2e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }

vector<int>G[N];
int du[N], dfn[N];
int cnt;
void dfs(int x, int fa)
{
	dfn[x] = ++cnt;
	for (auto &i : G[x])
	{
		if (i == fa)
			continue;
		dfs(i, x);
	}
}
int a[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n;
	cin >> n;
	for (int i = 1; i < n; i++)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		G[u].push_back(v);
		G[v].push_back(u);
		++du[u], ++du[v];
	}
	int tot = 0;
	for (int i = 1; i <= n; i++)
	{
		if (du[i] == 1)
			++tot;
	}
	int g = 0;
	for (int i = 1; i <= n; i++)
	{
		if (du[i] == 1)
		{
			a[++g] = i;
		}
	}
	dfs(1, 0);
	sort(a + 1, a + g + 1, [](int x, int y) { return dfn[x] < dfn[y]; });
	if (g & 1)
	{
		int tmp = g;
		a[++g] = a[tmp];
	}
	cout << g / 2 << endl;
	for (int i = 1; i <= g / 2; i++)
	{
		cout << a[i] << " " << a[i + g / 2] << endl;
	}
	return TIME;
}
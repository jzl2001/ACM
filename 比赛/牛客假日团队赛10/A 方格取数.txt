<多维dp>
链接：https://ac.nowcoder.com/acm/contest/1072/A
来源：牛客网

时间限制：C/C++ 1秒，其他语言2秒
空间限制：C/C++ 262144K，其他语言524288K
64bit IO Format: %lld
题目描述 
设有N*N的方格图(N ≤ 10,我们将其中的某些方格中填入正整数,而其他的方格中则放入数字0。如下图所示(见样例)：

某人从图的左上角的A 点出发，可以向下行走，也可以向右走，直到到达右下角的B点。在走过的路上，他可以取走方格中的数(取走后的方格中将变为数字0)。
此人从A点到B 点共走两次，试找出2条这样的路径，使得取得的数之和为最大。
输入描述:
输入的第一行为一个整数N(表示N*N的方格图)，接下来的每行有三个整数，前两个表示位置，第三个数为该位置上所放的数。一行单独的0表示输入结束。
输出描述:
只需输出一个整数，表示2条路径上取得的最大的和。
示例1
输入
复制
8
2 3 13
2 6 6
3 5 7
4 4 14
5 2 21 
5 6 4
6 3 15
7 2 14
0 0 0
输出
复制
67
#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<queue>
#include<string.h>
using namespace std;
int dp[11][11][11][11];
int map[11][11];
struct  
{
	int x, y;
}f[1010];
int main(){
	int n;
	cin >> n;
	int x, y, v;
	while (cin>>x>>y>>v,x,y,v)
	{
		map[x][y] = v;
	}
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			for (int k = 1; k <= n; k++)
				for (int u = 1; u <= n; u++)
				{
					dp[i][j][k][u] = max(max(dp[i - 1][j][k-1][u], dp[i-1][j ][k][u-1]) , max(dp[i][j-1][k - 1][u] ,dp[i][j-1][k][u - 1])) + map[i][j] + map[k][u]; // 两个人， 2 * 2 = 4 种状态， 取max
					if (i == k&&j == u) // 相等的话， 不能重复， 所以只能加一个
						dp[i][j][k][u] -= map[k][u];
				}
	cout << dp[n][n][n][n] << endl;
	return 0;
}
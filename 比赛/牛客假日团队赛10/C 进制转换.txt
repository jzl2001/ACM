链接：https://ac.nowcoder.com/acm/contest/1072/C
来源：牛客网
我们可以用这样的方式来表示一个十进制数： 将每个阿拉伯数字乘以一个以该数字所处位置的值减1为指数，以10为底数的幂之和的形式。例如：123可表示为 1*102＋2*101＋3*100这样的形式。
与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置的值-1为指数，以2为底数的幂之和的形式。一般说来，任何一个正整数Ｒ或一个负整数-Ｒ都可以被选来，作为一个数制系统的基数。如果是以Ｒ或-Ｒ为基数，则需要用到的数码为 0，1，．．．．Ｒ-1。例如，当Ｒ＝7时，所需用到的数码是0，1，2，3，4，5和6，这与其是Ｒ或-Ｒ无关。如果作为基数的数绝对值超过10，则为了表示这些数码，通常使用英文字母来表示那些大于9的数码。例如对16进制数来说，用Ａ表示10，用Ｂ表示11，用Ｃ表示12，用Ｄ表示13，用Ｅ表示14，用Ｆ表示15。
在负进制数中是用-Ｒ 作为基数，例如-15(十进制)相当于110001(-2进制)，并且它可以被表示为2的幂级数的和数：
110001＝1*(-2)5＋1*(-2)4＋0*(-2)3＋0*(-2)2＋0*(-2)1 ＋1*(-2)0
设计一个程序，读入一个十进制数和一个负进制数的基数, 并将此十进制数转换为此负进制下的数：-Ｒ∈｛-2，-3，-4，．．．，-20｝
输入描述:
第一个是十进制数N(-32768 ≤ N ≤ 32767)；  第二个是负进制数的基数-R。
输出描述:
输出此负进制数及其基数，若此基数超过10，则参照16进制的方式处理。
示例1 
输入
复制 
30000 -2
输出
复制 
30000=11011010101110000(base-2)
示例2 
输入
复制 
-20000 -2
输出
复制 
-20000=1111011000100000(base-2)
示例3 
输入
复制 
28800 -16
输出
复制 
28800=19180(base-16)
示例4 
输入
复制 
-25000 -16
输出
复制 
-25000=7FB8(base-16)
<负进制>
/*
a % b = a  - floor(a / b) * b
若a % b < 0
则令 a - (a / b + 1) * b            因为多减 b ， 所以a = a / b + 1
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define continue(x) { x; continue; }
#define break(x) { x; break; }
const int N = 1e5 + 10;
string tf = "0123456789ABCDEFGHIJKLMN";
int main(){
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	int a, b;
	cin >> a >> b;
	int c = a;
	string ans;
	while (a)
	{
		if (a % b < 0)
			ans.push_back(tf[a - (a / b + 1) * b]), a = a / b + 1;
		else
			ans.push_back(tf[a % b]), a /= b;
	}
	reverse(ans.begin(), ans.end());
	cout << c << "=";
	if (c == 0)
		ans = "0";
	cout << ans << "(base" << b << ")" << endl;
	return TIME;
}

构造一个含有nn个正整数的序列，并满足以下要求

序列是不递减的，a_1≤a_2≤...≤a_na 
1
​	
 ≤a 
2
​	
 ≤...≤a 
n
​	
 

序列中满足 j<ij<i 且 a_i\mod{a_j}=0a 
i
​	
 moda 
j
​	
 =0 的对数为mm

序列中所有数字不大于2\cdot{n}2⋅n

输入描述

第一行输入一个整数TT，代表有TT组测试数据

对于每一组测试数据，输入22个整数n,mn,m

输出描述

对于每组测试数据，输出nn个整数a_1,a_2,...,a_na 
1
​	
 ,a 
2
​	
 ,...,a 
n
​	
 

数据范围

1≤T≤10001≤T≤1000

1≤n≤2\cdot{10}^51≤n≤2⋅10 
5
 

0≤m≤\dfrac{n\cdot{(n-1)}}{2}0≤m≤ 
2
n⋅(n−1)
​	
 

\sum{n}≤2\cdot{10}^5∑n≤2⋅10 
5
 

本题答案不唯一，符合要求的答案均正确

样例输入复制
2
3 3
5 5
样例输出复制
6 6 6
1 2 3 4 5
构造，前面先填1，然后剩余的用n + 1到2*n来填充，n+1到2*n之间互质
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
#define cel cout << endl;
const int mod = 1e9 + 7;
const int N = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
ll calc(ll i, ll n)
{
	return (i - 1) * i / 2;
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		ll n;
		ll m;
		cin >> n >> m;	
		ll u = m;
		ll k = 0, tot = 0;
		vector<int>v;
		if ((n - 1) * n / 2 == m)
		{
			for (int i = 1; i <= n; i++)
			{
				cout << 1 << " ";
			}
			cout << endl;
			continue;
		}
		for (ll i = 1; i <= n; i++)
		{
			if ((i - 1) * i / 2 + (n - i) * i > m)
			{
				i--;
				m -= (i - 1) * i / 2 + (n - i) * i;
				//cout << i << " " << (i - 1) * i / 2 + (n - i) << endl;
				break;
			}
			else
			{
				v.push_back(1);
				printf("%d ", 1);
				tot++;
			}	
		}
		int pr = n + 1;
		while (m)
		{
			int L = 1, R = n;
			ll ans = sqrt(2 * m + 0.25) - 0.5 + 1e-8 + 1;
			m -= (ans - 1) * ans / 2;
			for (int i = 1; i <= ans; i++)
				printf("%d ", pr), v.push_back(pr);
			tot += ans;
			assert(pr <= 2 * n);
			pr++;
		}
		for (int i = tot + 1; i <= n; i++)
		{
			cout << pr << " ";
			assert(pr <= 2 * n);
			v.push_back(pr++);
		}
		cout << endl;
// 		ll tot1 = 0;
// 		for (int i = 0; i < n; i++)
// 		{
// 			for (int j = 0; j < i; j++)
// 			{
// 				if (v[i] % v[j] == 0)
// 				{
// 					tot1++;
// 				}
// 			}
// 		}
// 		cout << (tot1 == u ? "YES" : "NO") << endl;
	}
	return TIME;
}
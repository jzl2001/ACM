一个含有nn个结点mm条边的无向有权图，判断每个结点是否在从11到nn的最短路径上

输入描述

第一行输入一个整数TT，代表有TT组测试数据 对于每一组测试数据，第一行有22个整数n,mn,m，接下来mm行每行有33个整数x_i,y_i,w_ix 
i
​	
 ,y 
i
​	
 ,w 
i
​	
 ，表示xx和yy之间有一条权值为w_iw 
i
​	
 的边

输出描述

对于每组测试数据，在一行中输出nn个整数，第ii个整数代表ii号结点的关键性

00代表该结点不可能出现在从11到nn的最短路径上

11代表该结点出现在所有从11到nn的最短路径上

22代表该结点出现在部分从11到nn的最短路径上 

数据范围

1≤T≤10001≤T≤1000

2≤n≤10002≤n≤1000

n-1≤m≤\min(\dfrac{n\times(n-1)}{2}, 2\cdot{10}^5)n−1≤m≤min( 
2
n×(n−1)
​	
 ,2⋅10 
5
 )

1≤w_i≤10^81≤w 
i
​	
 ≤10 
8
 

\sum{n}≤2\cdot{10}^5∑n≤2⋅10 
5
 

\sum{m}≤2\cdot{10}^5∑m≤2⋅10 
5
 

保证无重边无自环且连通 

输出时每行末尾的多余空格，不影响答案正确性

样例输入复制
2
6 7
1 2 1
2 3 1
2 4 1
2 5 2
3 5 1
4 5 2
5 6 1
4 6
1 2 1
1 3 1
1 4 2
2 3 1
2 4 1
3 4 1
样例输出复制
1 1 2 0 1 1
1 2 2 1
样例解释
对于第一组样例的解释：

Image

对于第二组样例的解释：

Image

红点表示一定不在最短路径上 绿点表示在所有最短路径上 蓝点表示在一部分最短路径上
关键节点，通过方案数来判
#include <bits/stdc++.h>
//#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 998244353
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 1e3 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
vector<pair<int, ll>>G[N];
int n;
ll d1[N];
ll d2[N];
ll f1[N];
ll f2[N];
int vis1[N];
int vis2[N];
int ans[N];
void dijkstra(int st, int ed, ll* d, ll* f, int* vis)
{
	for (int i = 1; i <= n; i++)
	{
		d[i] = LINF;
	}
	priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>>pq;
	pq.push({ 0, st });
	d[st] = 0;
	f[st] = 1;
	while (!pq.empty())
	{
		int x = pq.top().second;
		ll w = pq.top().first;
		pq.pop();
		if (vis[x])
			continue;
		vis[x] = 1;
		for (auto &i : G[x])
		{
			int to = i.first;
			if (vis[to])
				continue;
			if (w + i.second < d[to])
			{
				d[to] = w + i.second;
				pq.push({ d[to], to });
				f[to] = f[x];
			}
			else
				if (w + i.second == d[to])
					f[to] = (f[to] + f[x]) % mod;
		}
	}
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int m;
		cin >> n >> m;
		for (int i = 1; i <= n; i++)
		{
			G[i].clear();
			d1[i] = d2[i] = f1[i] = f2[i] = vis1[i] = vis2[i] = 0;
		}
		for (int i = 1; i <= m; i++)
		{
			int u, v;
			ll w;
			scanf("%d%d%lld", &u, &v, &w);
			G[u].push_back({ v, w });
			G[v].push_back({ u, w });
		}
		dijkstra(1, n, d1, f1, vis1);
		dijkstra(n, 1, d2, f2, vis2);
		for (int i = 1; i <= n; i++)
		{
			if (d1[i] + d2[i] != d1[n])
			{
				ans[i] = 0;
				continue;
			}
			if (f1[i] * f2[i] % mod == f1[n])
			{
				ans[i] = 1;

			}
			else
				ans[i] = 2;
		}
		for (int i = 1; i <= n; i++)
		{
			cout << ans[i] << " ";
		}
		cout << endl;
	}
	return TIME;
}
<并查集><概率>
//答案为1到一个怪兽点, 再从这个怪兽点到其他点, 能去到点之和再除以边数的最大值
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 998244353;
const int N = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
ll fpow(ll a, ll b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
int a[N];
int mon[N];
vector<int>G[N];
int pre[N];
int cnt[N];
int re[N];
int find(int a)
{
	return a == pre[a] ? a : pre[a] = find(pre[a]);
}
void join(int a, int b)
{
	a = find(a), b = find(b);
	if (a == b)
		return;
	pre[a] = b;
	cnt[b] += cnt[a];
}
int main()
{
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int tot = 0;
		int n, m, k;
		cin >> n >> m >> k;
		for (int i = 1; i <= n; i++)
			mon[i] = 0, pre[i] = i, G[i].clear(), cnt[i] = 1;
		for (int i = 1; i <= m; i++)
		{
			int x, y;
			cin >> x >> y;
			G[x].push_back(y);
			G[y].push_back(x);
		}
		for (int i = 1; i <= k; i++)
		{
			int num;
			cin >> num;
			mon[num] = 1;
			re[++tot] = num;
		}
		for (int i = 1; i <= n; i++)
		{
			if (mon[i])
				continue;
			for (auto & j : G[i])
			{
				if (mon[j])
					continue;
				join(i, j);
			}
		}
		int x = find(1);
		int res = cnt[x];
		double ans = 0;
		for (int i = 1; i <= tot; i++) // 枚举怪兽点
		{
			int flag = 0;
			for (auto & j : G[re[i]])
			{
				if (find(j) == x) // 如果这个点可以连到1号点
				{
					flag = 1;
					break;
				}
			}
			if (flag)
			{
				int sum = 0;
				for (auto &j : G[re[i]])
				{
					int nx = find(j);
					if (mon[nx] || nx == x)  // 回到1的道路价值为0
						continue;
					sum += cnt[nx];
				}	
				ans = max(ans, 1.0 * res + 1.0 * sum / (int)G[re[i]].size());
			}
		}
		printf("%.6lf\n", ans);
	}
	return TIME;
}
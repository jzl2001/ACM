<完全背包>
容量为m + MAX
在于可能多买, 但价格更定, 则多买最多不多于MAX
m + MAX的容量即可, 再取价钱最小的
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 998244353;
const int N = 2e4 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
ll fpow(ll a, ll b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
ll d[N];
int f[N];
int a[N];
int b[N];
int main()
{
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	int n, m;
	while (~scanf("%d%d", &n, &m))
	{
		int MX = 0;
		memset(d, 0x3f, sizeof d);
		for (int i = 1; i <= n; i++)
			scanf("%d%d", &a[i], &b[i]), MX = max(MX, b[i]);
		d[0] = 0;
		for (int i = 1; i <= n; i++)
		{
			for (int j = b[i]; j <= MX + m; j++)
			{
				d[j] = min(d[j], d[j - b[i]] + a[i]);
			}
		}
		ll ans1 = LINF, ans2 = 0;
		for (int i = m; i <= m + MX; i++)
		{
			if (d[i] <= ans1)
			{
				ans1 = d[i];
				ans2 = i;
			}
		}
		printf("%lld %lld\n", ans1, ans2);
		//	cout << ans1 << " " << ans2 << endl;
	}
	return TIME;
}

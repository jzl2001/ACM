#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 1e6 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
int a[N];
int c[N];
int d[N][3][3]; //最多选两个顺子， 因为如果超过三个了， 可以用相同的顶替
int main()
{
#ifdef LOCAL
	freopen("D:/input.txt", "r", stdin);
#endif
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i)
		scanf("%d", &a[i]), ++c[a[i]];
	for (int i = 1; i <= m; ++i)   // 用到第i个数字， 有x个[i - 1, i, i + 1] y个[i, i + 1, i + 2]，能组成多少三元组
	{							// 等于[i - 2, i - 1, i]这一维被省掉了
		for (int x = 0; x < 3; ++x) 
		{
			for (int y = 0; y < 3; ++y) 
			{
				for (int z = 0; z < 3; ++z) // z 个[i - 2, i - 1, i]   因为位置后移， 所以上一个位置是i + 1， 
				{							// 到当前位置就是i, i + 2 就是 i + 1， 枚举有多少 i - 2， i - 1， i即可												
					if (x + y + z > c[i])
						continue;
					d[i][y][z] = max(d[i][y][z], d[i - 1][x][y] + (c[i] - x - y - z) / 3 + z);
				}
			}
		}
	}
	cout << d[m][0][0] << endl; // 因为m个数字， 最多到i， 所以 i + 1， i + 2都为0
	return TIME;
}
E. Long Permutation
time limit per test4 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
A permutation is a sequence of integers from 1 to n of length n containing each number exactly once. For example, [1], [4,3,5,1,2], [3,2,1] — are permutations, and [1,1], [4,3,1], [2,3,4] — no.

Permutation a is lexicographically smaller than permutation b (they have the same length n), if in the first index i in which they differ, a[i]<b[i]. For example, the permutation [1,3,2,4] is lexicographically smaller than the permutation [1,3,4,2], because the first two elements are equal, and the third element in the first permutation is smaller than in the second.

The next permutation for a permutation a of length n — is the lexicographically smallest permutation b of length n that lexicographically larger than a. For example:

for permutation [2,1,4,3] the next permutation is [2,3,1,4];
for permutation [1,2,3] the next permutation is [1,3,2];
for permutation [2,1] next permutation does not exist.
You are given the number n — the length of the initial permutation. The initial permutation has the form a=[1,2,…,n]. In other words, a[i]=i (1≤i≤n).

You need to process q queries of two types:

1 l r: query for the sum of all elements on the segment [l,r]. More formally, you need to find a[l]+a[l+1]+…+a[r].
2 x: x times replace the current permutation with the next permutation. For example, if x=2 and the current permutation has the form [1,3,4,2], then we should perform such a chain of replacements [1,3,4,2]→[1,4,2,3]→[1,4,3,2].
For each query of the 1-st type output the required sum.

Input
The first line contains two integers n (2≤n≤2⋅105) and q (1≤q≤2⋅105), where n — the length of the initial permutation, and q — the number of queries.

The next q lines contain a single query of the 1-st or 2-nd type. The 1-st type query consists of three integers 1, l and r (1≤l≤r≤n), the 2-nd type query consists of two integers 2 and x (1≤x≤105).

It is guaranteed that all requests of the 2-nd type are possible to process.

Output
For each query of the 1-st type, output on a separate line one integer — the required sum.

Example
inputCopy
4 4
1 2 4
2 3
1 1 2
1 3 4
outputCopy
9
4
6
Note
Initially, the permutation has the form [1,2,3,4]. Queries processing is as follows:

2+3+4=9;
[1,2,3,4]→[1,2,4,3]→[1,3,2,4]→[1,3,4,2];
1+3=4;
4+2=6

题意：有一个长度为n的排列，最开始是1~n，有q次操作，
1号操作询问区间[l,r]的sum，第二种操作是当前排列变换到比其字典序大x的排列。
思路：
询问次数2e5，x最大1e5，一共2e10。
14的阶乘大概8e10，也就是说最多变换后面的14位，我们可以使用逆康拓展开求出当前要求的序列。
然后暴力更新答案就行了，时间复杂度是O(q*(14^2))
#include<bits/stdc++.h>
using namespace std;
const int N = 2e5 + 10;
const int mod = 1e9 + 7;
typedef long long ll;
 
int a[N];
ll fac[30];
ll sum[N];
void ReContor(int *a, int n, ll k, int ed)
{
	int vis[30] = { 0 };
	for (int i = 1; i <= n; i++)
	{
		int cnt = k / fac[n - i], j;
		for (j = 1; j <= n; j++) //未使用的数字中第cnt大的
			if (!vis[j])
			{
				if (!cnt) //找到数字
					break;
				cnt--;
			}
		vis[j] = 1;
		a[i] = ed + j;
		k %= fac[n - i]; //对当前阶乘取模
	}
}
void init()
{
	fac[0] = 1;
	for (int i = 1; i <= 20; i++)
		fac[i] = fac[i - 1] * i;
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	init();
	int n, q;
	scanf("%d%d", &n, &q);
	for (int i = 1; i <= n; i++)
		sum[i] = sum[i - 1] + i;
	int m = 14, ed = n - 14;
	if (n < 14)
		m = n, ed = 0;
	for (int i = 1; i <= m; i++)
		a[i] = i;
	ll cnt = 0;
	while (q--)
	{
		int op;
		scanf("%d", &op);
		if (op == 1)
		{
			int l, r;
			scanf("%d%d", &l, &r);
			printf("%lld\n", sum[r] - sum[l - 1]);
		}
		else
		{
			int x;
			scanf("%d", &x);
			cnt += x;
			ReContor(a, m, cnt, ed);
			for (int i = 1; i <= m; i++)
				sum[ed + i] = sum[ed + i - 1] + a[i];
			for (int i = 1; i <= m; i++)
				a[i] = i;
		}
	}
	return 0;
}

链接：https://ac.nowcoder.com/acm/contest/7501/F
来源：牛客网

In xCPC contest, there are totally k_{}k 
​	
  types of problems. Now you have a_ia 
i
​	
  problems in type i_{}i 
​	
 , and you want to make some problemsets with these problems.

In your opinion, the number of problems in one problemset must be in interval [L, R]_{}[L,R] 
​	
 , and the number of problems in type i_{}i 
​	
  must be in interval [l_i, r_i][l 
i
​	
 ,r 
i
​	
 ].

Now you want to know the maximum number of problemsets you can make, where one problem can be used in no more than one problemset.
输入描述:
The first line contains three integers k,L,R~(1\le k \le 10^5, 1\le L \le R \le 10^9)k,L,R (1≤k≤10 
5
 ,1≤L≤R≤10 
9
 ).

The second line contains k_{}k 
​	
  integers a_1, a_2, \cdots, a_k~(0\le a_i\le 10^9)a 
1
​	
 ,a 
2
​	
 ,⋯,a 
k
​	
  (0≤a 
i
​	
 ≤10 
9
 ).

Following k_{}k 
​	
  lines each contains two integers l_i, r_i~(0\le l_i \le r_i \le 10^9)l 
i
​	
 ,r 
i
​	
  (0≤l 
i
​	
 ≤r 
i
​	
 ≤10 
9
 ).
输出描述:
Only one line containing one integer, denoting the maximum number of problemsets you can make.
示例1
输入
复制
4 10 12
4 20 10 6
1 2
3 5
2 4
0 2
输出
复制
4
说明
One possible scheme is (1, 5, 2, 2), (1, 5, 2, 2), (1, 5, 3, 1), (1, 5, 3, 1)_{}(1,5,2,2),(1,5,2,2),(1,5,3,1),(1,5,3,1) .
<二分>
题意：给出n种题目，并给出数目，然后需要出x套题目，每套题目要求范围是L到R，然后每套题目里面
的某种题目也有限制。二分答案mid，然后先取左区间，剩余的可以分的最多是b[i] - a[i]) * mid，但是又
有数目限制，所以跟c[i] - a[i] * mid取个min。
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef unsigned long long ll;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
const int mod = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
template<class T> T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); };
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
const int N = 2e5 + 10;

ll c[N];
ll a[N], b[N];
int k, L, R;
ll suma, sumb;
ll tot;
bool check(ll mid)
{
	if (suma > R)
		return false;
	if (sumb < L)
		return false;
	ll sum = 0, tot = 0;
	for (int i = 1; i <= k; i++)
	{
		if (a[i] * mid > c[i])
			return false;
		sum += a[i];
		tot += min((b[i] - a[i]) * mid, c[i] - a[i] * mid);
	}
	return tot / mid + sum >= L;
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	ll all = 0;
	cin >> k >> L >> R;
	for (int i = 1; i <= k; i++)
		scanf("%lld", &c[i]), all += c[i];
	for (int i = 1; i <= k; i++)
		scanf("%lld%lld", &a[i], &b[i]), suma += a[i], sumb += b[i];
	ll l = 1, r = 1e14, ans = 0;
	while (l <= r)
	{
		ll mid = (l + r) / 2;
		if (check(mid))
			ans = mid, l = mid + 1;
		else
			r = mid - 1;
	}
	cout << ans << endl;
	return TIME;
}
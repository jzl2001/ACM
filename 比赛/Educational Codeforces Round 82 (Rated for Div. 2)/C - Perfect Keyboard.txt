/*
用一个ans记录答案，如果之后出现的字符，他周围的一定是当前ans两边的，不然就证明他有三个在周围了
*/
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
 
#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 2e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
char s[N];
int p[N];
int vis[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		for (char i = 'a'; i <= 'z'; i++)
			vis[i] = 0;
		int flag = 0;
		string s;
		cin >> s;
		string ans;
		int idx = 0;
		for (int i = 0; i < s.size(); i++)
		{
			if (vis[s[i]])
			{
				if (idx < ans.size() - 1 && s[i] == ans[idx + 1])
					idx++;
				else
					if (idx && ans[idx - 1] == s[i])
						idx--;
					else
					{
						flag = 1;
						break;
					}
			}
			else
			{
				vis[s[i]] = 1;
				if (idx == ans.size() - 1)
					ans.push_back(s[i]), idx++;
				else
					if (idx == 0)
						ans = s[i] + ans;
					else
					{
						flag = 1;
						break;
					}
			}
		}
		if (flag)
		{
			cout << "NO" << endl;
			continue;
		}
		else
			cout << "YES" << endl << ans;
		for (char i = 'a'; i <= 'z'; i++)
		{
			if (!vis[i])
				cout << i;
		}
		cout << endl;
	}
	return TIME;
}
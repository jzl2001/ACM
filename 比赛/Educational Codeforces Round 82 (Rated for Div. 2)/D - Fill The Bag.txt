/*
因为都是2的次幂，所以拆分数字，然后如果当前有需要，就减减，否则向上找，找到了拆分，
用一个x记录上一位剩余的个数，每一次x再右移一位
*/
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

#ifdef LOCAL
#define debug(x) cout << "[" __FUNCTION__ ": " #x " = " << (x) << "]\n"
#define TIME cout << "RuningTime: " << clock() << "ms\n", 0
#else
#define TIME 0
#endif
#define hash_ 1000000009
#define Continue(x) { x; continue; }
#define Break(x) { x; break; }
const int mod = 1e9 + 7;
const int N = 2e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
#define gc p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin), p1 == p2) ? EOF : *p1++;
inline int read(){ static char buf[1000000], *p1 = buf, *p2 = buf; register int x = false; register char ch = gc; register bool sgn = false; while (ch != '-' && (ch < '0' || ch > '9')) ch = gc; if (ch == '-') sgn = true, ch = gc; while (ch >= '0'&& ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc; return sgn ? -x : x; }
ll fpow(ll a, int b, int mod) { ll res = 1; for (; b > 0; b >>= 1) { if (b & 1) res = res * a % mod; a = a * a % mod; } return res; }
ll a[N];
ll d[N];
int vis[110];
int num[110];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		ll n, m;
		cin >> n >> m;
		ll sum = 0;
		for (int i = 0; i <= 30; i++)
			d[i] = 0;
		for (int i = 1; i <= m; i++)
		{
			cin >> a[i];
			sum += a[i];
			int cnt = 0;
			while (a[i] != 1)
			{
				a[i] /= 2;
				cnt++;
			}
			d[cnt]++;
		}
		if (n > sum)
		{
			cout << "-1" << endl;
			continue;
		}
		ll ans = 0, x = 0; //当前位可用
		for (int i = 0; i <= 30; i++)
		{
			if ((1 << i) & n)
				x--;
			if (x < 0)
			{
				int cnt = i;
				while (!d[cnt])
				{
					d[cnt++]++;
				}
				d[cnt]--;
				ans += cnt - i;
				x = 0;
			}
			x += d[i];
			x >>= 1;
		}
		cout << ans << endl;
	}
	return TIME;
}
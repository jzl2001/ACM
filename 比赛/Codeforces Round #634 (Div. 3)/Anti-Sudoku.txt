You are given a correct solution of the sudoku puzzle. If you don't know what is the sudoku, you can read about it here.

The picture showing the correct sudoku solution:



Blocks are bordered with bold black color.

Your task is to change at most 9 elements of this field (i.e. choose some 1≤i,j≤9 and change the number at the position (i,j) to any other number in range [1;9]) to make it anti-sudoku. The anti-sudoku is the 9×9 field, in which:

Any number in this field is in range [1;9];
each row contains at least two equal elements;
each column contains at least two equal elements;
each 3×3 block (you can read what is the block in the link above) contains at least two equal elements.
It is guaranteed that the answer exists.

You have to answer t independent test cases.

Input
The first line of the input contains one integer t (1≤t≤104) — the number of test cases. Then t test cases follow.

Each test case consists of 9 lines, each line consists of 9 characters from 1 to 9 without any whitespaces — the correct solution of the sudoku puzzle.

Output
For each test case, print the answer — the initial field with at most 9 changed elements so that the obtained field is anti-sudoku. If there are several solutions, you can print any. It is guaranteed that the answer exists.

九个格子，分别占据十行十列就可以了
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int N = 1e6 + 10;
int cnt[N];
int a[N];
char s[10][10];
char y[10] = { 0, 1, 4, 7, 2, 5, 8, 3, 6, 9 };
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		for (int i = 1; i <= 9; i++)
		{
			scanf("%s", s[i] + 1);
		}
		for (int i = 1; i <= 9; i++)
		{
			for (int j = 1; j <= 9; j++)
			{
				if (j == y[i])
				{
					for (int k = 1; k <= 9; k++)
					{
						if (s[i][k] != s[i][j])
						{
							s[i][j] = s[i][k];
							break;
						}
					}
				}
			}
		}
		for (int i = 1; i <= 9; i++, cout << endl)
		{
			for (int j = 1; j <= 9; j++)
			{
				putchar(s[i][j]);
			}
		}
	}
	return 0;
}
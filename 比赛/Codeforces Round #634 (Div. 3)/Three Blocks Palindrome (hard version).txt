The only difference between easy and hard versions is constraints.

You are given a sequence a consisting of n positive integers.

Let's define a three blocks palindrome as the sequence, consisting of at most two distinct elements (let these elements are a and b, a can be equal b) and is as follows: [a,a,…,ax,b,b,…,by,a,a,…,ax]. There x,y are integers greater than or equal to 0. For example, sequences [], [2], [1,1], [1,2,1], [1,2,2,1] and [1,1,2,1,1] are three block palindromes but [1,2,3,2,1], [1,2,1,2,1] and [1,2] are not.

Your task is to choose the maximum by length subsequence of a that is a three blocks palindrome.

You have to answer t independent test cases.

Recall that the sequence t is a a subsequence of the sequence s if t can be derived from s by removing zero or more elements without changing the order of the remaining elements. For example, if s=[1,2,1,3,1,2,1], then possible subsequences are: [1,1,1,1], [3] and [1,2,1,3,1,2,1], but not [3,2,3] and [1,1,1,1,2].

Input
The first line of the input contains one integer t (1≤t≤2000) — the number of test cases. Then t test cases follow.

The first line of the test case contains one integer n (1≤n≤2000) — the length of a. The second line of the test case contains n integers a1,a2,…,an (1≤ai≤26), where ai is the i-th element of a. Note that the maximum value of ai can be up to 26.

It is guaranteed that the sum of n over all test cases does not exceed 2000 (∑n≤2000).

Output
For each test case, print the answer — the maximum possible length of some subsequence of a that is a three blocks palindrome.

Example
inputCopy
6
8
1 1 2 2 3 2 1 1
3
1 3 3
4
1 10 10 1
1
26
2
2 1
3
1 1 1
outputCopy
7
2
4
1
1
3
/*
题意:找到子序列满足
aba
a跟b里面的元素都要相同
思路:
枚举每个元素，然后再枚举左右有几个
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int N = 2e5 + 10;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
vector<int>G[210];
int cnt[210][N], a[N];
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		cin >> n;
		for (int i = 1; i <= 200; i++)
			G[i].clear();
		for (int i = 1; i <= n; i++)
		{
			cin >> a[i];
			for (int j = 1; j <= 200; j++)
			{
				cnt[j][i] = cnt[j][i - 1];
			}
			cnt[a[i]][i]++;
			G[a[i]].push_back(i);
		}
		int ans = 0;
		for (int i = 1; i <= 200; i++)
		{
			ans = max(ans, (int)G[i].size());
			int len = G[i].size();
			int mx = 0;
			for (int j = 0; j < len / 2; j++)
			{
				int L = G[i][j];
				int R = G[i][len - j - 1] - 1; //len减去长度是右边下标，再减一不包含当前R了
				//cout << L << " " <<R << endl;
				for (int k = 1; k <= 200; k++)
				{
					int u = cnt[k][R] - cnt[k][L];
					mx = max((j + 1) * 2 + u, mx);
				}
			}
			ans = max(ans, mx);
		}
		cout << ans << endl;
	}
	return 0;
}
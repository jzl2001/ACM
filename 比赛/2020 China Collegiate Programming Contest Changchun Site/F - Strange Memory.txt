https://pintia.cn/problem-sets/1325328163585343488/problems/1325343094703611909
Once there was a rooted tree. The tree contained n nodes, which were numbered 1,…,n. The node numbered 1 was the root of the tree. Besides, every node i was assigned a number a
​i
​​ . Your were surprised to find that there were several pairs of nodes (i,j) satisfying a
​i
​​ ⊕a
​j
​​ =a
​lca(i,j)
​​ , where ⊕ denotes the bitwise XOR operation, and lca(i,j) is the lowest common ancestor of i and j, or formally, the lowest (i.e. deepest) node that has both i and j as descendants.

Unfortunately, you cannot remember all such pairs, and only remember the sum of i⊕j for all different pairs of nodes (i,j) satisfying the above property. Note that (i,j) and (j,i) are considered the same here. In other words, you will only be able to recall 
​i=1
​∑
​n
​​ 
​j=i+1
​∑
​n
​​ [a
​i
​​ ⊕a
​j
​​ =a
​lca(i,j)
​​ ](i⊕j).

You are assumed to calculate it now in order to memorize it better in the future.

Input
The first line contains a single integer n (2≤n≤10
​5
​​ ).

The second line contains n integers, a
​1
​​ ,a
​2
​​ ,…,a
​n
​​  (1≤a
​i
​​ ≤10
​6
​​ ).

Each of the next n−1 lines contains 2 integers u and v (1≤u,v≤n,u≠v), indicating that there is an edge between u and v. It is guaranteed that these edges form a tree.

Output
Print what you will memorize in the future.

Example
Input

6
4 2 1 6 6 5
1 2
2 3
1 4
4 5
4 6
Output

18

树上启发式合并，按位维护。
#include<bits/stdc++.h>
#include <unordered_map>
using namespace std;
const int N = 1e5 + 10;
const int mod = 1e9 + 7;
typedef long long ll;

int a[N];
ll ans;
vector<int>G[N];
ll tot = 0;
unordered_map<int, vector<pair<int, int>>>mp[N];
void dfs(int x, int fa)
{
	for (auto &i : G[x])
	{
		if (i == fa)
			continue;
		dfs(i, x);
		if (mp[x].size() < mp[i].size())
			swap(mp[i], mp[x]);
		for (auto &j : mp[i])
		{
			int tmp = j.first ^ a[x];
			if (mp[x].find(tmp) == mp[x].end())
				continue;
			vector<pair<int, int>> &u = j.second;
			vector<pair<int, int>> &v = mp[x][tmp];
			for (int k = 0; k < 21; k++)
			{
				ans += 1LL * u[k].first * v[k].second * (1 << k);
				ans += 1LL * u[k].second * v[k].first * (1 << k);
			}
		}
		for (auto &j : mp[i])
		{
			vector<pair<int, int>> &u = j.second;
			vector<pair<int, int>> &v = mp[x][j.first];
			for (int k = 0; k < 21; k++)
			{
				if (v.size() <= k)
					v.push_back({ 0, 0 });
				v[k].first += u[k].first;
				v[k].second += u[k].second;
			}
		}
		mp[i].clear();
	}
	for (int k = 0; k < 21; k++)
	{
		if (mp[x][a[x]].size() <= k)
			mp[x][a[x]].push_back({ 0, 0 });
		if ((x >> k) & 1)
			mp[x][a[x]][k].first++;
		else
			mp[x][a[x]][k].second++;
	}
}
int main()
{
#ifdef LOCAL
	freopen("E:/input.txt", "r", stdin);
#endif
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	for (int i = 1; i < n; i++)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		G[u].push_back(v);
		G[v].push_back(u);
	}
	dfs(1, 0);
	cout << ans << endl;
	return 0;
}